{"version":3,"sources":["snippets.js","App.js","index.js"],"names":["getQuery","arg","spaceCount","anonymousQuery","operationDataList","query","replace","repeat","name","language","codeMirrorMode","options","generate","parameters","window","location","search","substr","split","forEach","entry","eq","indexOf","decodeURIComponent","slice","graphqlParamNames","variables","operationName","explorerIsOpen","otherParams","k","hasOwnProperty","nonce","wpGraphiQLSettings","endpoint","graphqlEndpoint","origin","graphQLFetcher","graphQLParams","fetch","method","headers","Accept","body","JSON","stringify","credentials","then","response","json","onEditVariables","newVariables","updateURL","onEditOperationName","newOperationName","params","history","replaceState","Object","keys","map","key","encodeURIComponent","join","DEFAULT_QUERY","print","parse","localStorage","getItem","generateDefaultFallbackQuery","queryExample","storedExplorerPaneState","storedCodeExporterPaneState","codeExporterIsOpen","App","state","schema","_handleInspectOperation","cm","mousePos","parsedQuery","console","error","token","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","log","operationKind","kind","operation","value","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","setState","_handleToggleExplorer","newExplorerIsOpen","setItem","_handleToggleExporter","newCodeExporterIsOpen","getIntrospectionQuery","result","newState","buildClientSchema","data","siteMetadataType","__schema","types","type","fields","field","e","editor","this","_graphiql","getQueryEditor","setOption","extraKeys","codeExporter","hideCodeExporter","snippets","codeMirrorTheme","Fragment","onEdit","onToggleExplorer","onRunOperation","handleRunQuery","ref","fetcher","onEditQuery","Toolbar","Button","onClick","handlePrettifyQuery","label","title","handleToggleHistory","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3111e8da.chunk.js","sourcesContent":["const getQuery = (arg, spaceCount) => {\n    const { operationDataList } = arg\n    const { query } = operationDataList[0]\n    const anonymousQuery = query.replace(/query\\s.+{/gim, `{`)\n    return (\n        ` `.repeat(spaceCount) +\n        anonymousQuery.replace(/\\n/g, `\\n` + ` `.repeat(spaceCount))\n    )\n}\n\nconst pageQuery = {\n    name: `Page query`,\n    language: `Gatsby`,\n    codeMirrorMode: `jsx`,\n    options: [],\n    generate: arg => `import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst ComponentName = ({ data }) => <pre>{JSON.stringify(data, null, 4)}</pre>\n\nexport const query = graphql\\`\n${getQuery(arg, 2)}\n\\`\n\nexport default ComponentName\n\n`,\n}\n\nconst staticHook = {\n    name: `StaticQuery hook`,\n    language: `Gatsby`,\n    codeMirrorMode: `jsx`,\n    options: [],\n    generate: arg => `import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst ComponentName = () => {\n  const data = useStaticQuery(graphql\\`\n${getQuery(arg, 4)}\n  \\`)\n  return <pre>{JSON.stringify(data, null, 4)}</pre>\n}\n\nexport default ComponentName\n\n`,\n}\n\nconst staticQuery = {\n    name: `StaticQuery`,\n    language: `Gatsby`,\n    codeMirrorMode: `jsx`,\n    options: [],\n    generate: arg => `import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst ComponentName = () => (\n  <StaticQuery\n    query={graphql\\`\n${getQuery(arg, 6)}\n    \\`}\n    render={data => <pre>{JSON.stringify(data, null, 4)}</pre>}\n  ></StaticQuery>\n)\n\nexport default ComponentName\n\n`,\n}\n\nexport default [pageQuery, staticHook, staticQuery]\n","import React from 'react';\n\nimport GraphiQL from \"graphiql\"\nimport GraphiQLExplorer from \"graphiql-explorer\"\nimport CodeExporter from \"graphiql-code-exporter\"\nimport {getIntrospectionQuery, buildClientSchema, parse, print} from \"graphql\"\nimport \"whatwg-fetch\"\nimport snippets from \"./snippets\"\n\n/**\n * Style the app\n */\nimport 'graphiql/graphiql.css';\nimport './app.css';\nimport \"graphiql-code-exporter/CodeExporter.css\"\n\nconst parameters = {}\n\nwindow.location.search\n    .substr(1)\n    .split(`&`)\n    .forEach(function (entry) {\n        var eq = entry.indexOf(`=`)\n        if (eq >= 0) {\n            parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1).replace(/\\+/g, '%20'))\n        }\n    })\n\n// Produce a Location query string from a parameter object.\nfunction locationQuery(params) {\n    return (\n        'admin.php' +\n        '?' +\n        Object.keys(params)\n            .map(function (key) {\n                return encodeURIComponent(key) + `=` + encodeURIComponent(params[key])\n            })\n            .join(`&`)\n    )\n}\n\n// Derive a fetch URL from the current URL, sans the GraphQL parameters.\nconst graphqlParamNames = {\n    query: true,\n    variables: true,\n    operationName: true,\n    explorerIsOpen: true,\n}\n\nconst otherParams = {}\n\nfor (var k in parameters) {\n    if (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {\n        otherParams[k] = parameters[k]\n    }\n}\n\nlet nonce = (window.wpGraphiQLSettings && window.wpGraphiQLSettings.nonce) ? window.wpGraphiQLSettings.nonce : null;\nlet endpoint = (window.wpGraphiQLSettings && window.wpGraphiQLSettings.graphqlEndpoint) ? window.wpGraphiQLSettings.graphqlEndpoint : window.location.origin;\n\n\nfunction graphQLFetcher(graphQLParams) {\n    return fetch(endpoint, {\n        method: `post`,\n        headers: {\n            Accept: `application/json`,\n            \"Content-Type\": `application/json`,\n            'X-WP-Nonce': nonce\n        },\n        body: JSON.stringify(graphQLParams),\n        credentials: `include`,\n    }).then(function (response) {\n        return response.json()\n    })\n}\n\n// When the query and variables string is edited, update the URL bar so\n// that it can be easily shared.\nfunction onEditVariables(newVariables) {\n    parameters.variables = newVariables\n    updateURL()\n}\n\nfunction onEditOperationName(newOperationName) {\n    parameters.operationName = newOperationName\n    updateURL()\n}\n\nfunction updateURL() {\n    // eslint-disable-next-line\n    history.replaceState(null, null, locationQuery(parameters))\n}\n\n// We control query, so we need to recreate initial query text that show up\n// on visiting graphiql - in order it will be\n//  - query from query string (if set)\n//  - query stored in localStorage (which graphiql set when closing window)\n//  - default empty query\nconst DEFAULT_QUERY =\n    parameters.query && print( parse( parameters.query ) ) ||\n    (window.localStorage && window.localStorage.getItem(`graphiql:query`)) ||\n    null\n\nconst QUERY_EXAMPLE_SITEMETADATA_TITLE = `#     {\n#       generalSettings {\n#         url\n#         title\n#       }\n#     }`\n\nconst QUERY_EXAMPLE_FALLBACK = `#     {\n#       posts {\n#         nodes {\n#           title\n#           uri\n#         }\n#       }\n#     }`\n\nfunction generateDefaultFallbackQuery(queryExample) {\n    return `# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that starts\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n${queryExample}\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n`\n}\n\nconst storedExplorerPaneState =\n    typeof parameters.explorerIsOpen !== `undefined`\n        ? parameters.explorerIsOpen === `false`\n        ? false\n        : true\n        : window.localStorage\n        ? window.localStorage.getItem(`graphiql:graphiqlExplorerOpen`) !== `false`\n        : true\n\nconst storedCodeExporterPaneState =\n    typeof parameters.codeExporterIsOpen !== `undefined`\n        ? parameters.codeExporterIsOpen === `false`\n        ? false\n        : true\n        : window.localStorage\n        ? window.localStorage.getItem(`graphiql:graphiqlCodeExporterOpen`) ===\n        `true`\n        : false\n\nclass App extends React.Component {\n    state = {\n        schema: null,\n        query: DEFAULT_QUERY,\n        explorerIsOpen: storedExplorerPaneState,\n        codeExporterIsOpen: storedCodeExporterPaneState,\n    }\n\n    componentDidMount() {\n        graphQLFetcher({\n            query: getIntrospectionQuery(),\n        }).then(result => {\n            const newState = {schema: buildClientSchema(result.data)}\n\n            if (this.state.query === null) {\n                try {\n                    const siteMetadataType = result.data.__schema.types.find(\n                        type => type.name === `SiteSiteMetadata` && type.kind === `OBJECT`\n                    )\n                    if (siteMetadataType) {\n                        const titleField = siteMetadataType.fields.find(\n                            field =>\n                                field.name === `title` &&\n                                field.type &&\n                                field.type.kind === `SCALAR` &&\n                                field.type.name === `String`\n                        )\n\n                        if (titleField) {\n                            newState.query = generateDefaultFallbackQuery(\n                                QUERY_EXAMPLE_SITEMETADATA_TITLE\n                            )\n                        }\n                    }\n                    // eslint-disable-next-line no-empty\n                } catch (e) {\n                    console.error(e)\n                }\n                if (!newState.query) {\n                    newState.query = generateDefaultFallbackQuery(QUERY_EXAMPLE_FALLBACK)\n                }\n            }\n\n            this.setState(newState)\n        })\n\n        const editor = this._graphiql.getQueryEditor()\n        editor.setOption(`extraKeys`, {\n            ...(editor.options.extraKeys || {}),\n            \"Shift-Alt-LeftClick\": this._handleInspectOperation,\n        })\n    }\n\n    _handleInspectOperation = (cm, mousePos) => {\n        const parsedQuery = parse(this.state.query || ``)\n\n        if (!parsedQuery) {\n            console.error(`Couldn't parse query document`)\n            return null\n        }\n\n        const token = cm.getTokenAt(mousePos)\n        const start = {line: mousePos.line, ch: token.start}\n        const end = {line: mousePos.line, ch: token.end}\n        const relevantMousePos = {\n            start: cm.indexFromPos(start),\n            end: cm.indexFromPos(end),\n        }\n\n        const position = relevantMousePos\n\n        const def = parsedQuery.definitions.find(definition => {\n            if (!definition.loc) {\n                console.log(`Missing location information for definition`)\n                return false\n            }\n\n            const {start, end} = definition.loc\n            return start <= position.start && end >= position.end\n        })\n\n        if (!def) {\n            console.error(`Unable to find definition corresponding to mouse position`)\n            return null\n        }\n\n        const operationKind =\n            def.kind === `OperationDefinition`\n                ? def.operation\n                : def.kind === `FragmentDefinition`\n                ? `fragment`\n                : `unknown`\n\n        const operationName =\n            def.kind === `OperationDefinition` && !!def.name\n                ? def.name.value\n                : def.kind === `FragmentDefinition` && !!def.name\n                ? def.name.value\n                : `unknown`\n\n        const selector = `.graphiql-explorer-root #${operationKind}-${operationName}`\n\n        const el = document.querySelector(selector)\n        if (el) {\n            el.scrollIntoView()\n            return true\n        }\n\n        return false\n    }\n\n    _handleEditQuery = query => {\n        parameters.query = query\n        updateURL()\n        this.setState({query})\n    }\n\n    _handleToggleExplorer = () => {\n        const newExplorerIsOpen = !this.state.explorerIsOpen\n        if (window.localStorage) {\n            window.localStorage.setItem(\n                `graphiql:graphiqlExplorerOpen`,\n                newExplorerIsOpen\n            )\n        }\n        parameters.explorerIsOpen = newExplorerIsOpen\n        updateURL()\n        this.setState({explorerIsOpen: newExplorerIsOpen})\n    }\n\n    _handleToggleExporter = () => {\n        const newCodeExporterIsOpen = !this.state.codeExporterIsOpen\n        if (window.localStorage) {\n            window.localStorage.setItem(\n                `graphiql:graphiqlCodeExporterOpen`,\n                newCodeExporterIsOpen\n            )\n        }\n        parameters.codeExporterIsOpen = newCodeExporterIsOpen\n        updateURL()\n        this.setState({ codeExporterIsOpen: newCodeExporterIsOpen })\n    }\n\n\n\n    render() {\n        const { query, schema, codeExporterIsOpen } = this.state\n        const codeExporter = codeExporterIsOpen ? (\n            <CodeExporter\n                hideCodeExporter={this._handleToggleExporter}\n                snippets={snippets}\n                query={query}\n                codeMirrorTheme=\"default\"\n            />\n        ) : null\n\n        return (\n            <React.Fragment>\n                <GraphiQLExplorer\n                    schema={schema}\n                    query={query}\n                    onEdit={this._handleEditQuery}\n                    explorerIsOpen={this.state.explorerIsOpen}\n                    onToggleExplorer={this._handleToggleExplorer}\n                    onRunOperation={operationName =>\n                        this._graphiql.handleRunQuery(operationName)\n                    }\n                />\n                <GraphiQL\n                    ref={ref => (this._graphiql = ref)}\n                    fetcher={graphQLFetcher}\n                    schema={schema}\n                    query={query}\n                    onEditQuery={this._handleEditQuery}\n                    onEditVariables={onEditVariables}\n                    onEditOperationName={onEditOperationName}\n                >\n                    <GraphiQL.Toolbar>\n                        <GraphiQL.Button\n                            onClick={() => this._graphiql.handlePrettifyQuery()}\n                            label=\"Prettify\"\n                            title=\"Prettify Query (Shift-Ctrl-P)\"\n                        />\n                        <GraphiQL.Button\n                            onClick={() => this._graphiql.handleToggleHistory()}\n                            label=\"History\"\n                            title=\"Show History\"\n                        />\n                        <GraphiQL.Button\n                            onClick={this._handleToggleExplorer}\n                            label=\"Explorer\"\n                            title=\"Toggle Explorer\"\n                        />\n                        <GraphiQL.Button\n                            onClick={this._handleToggleExporter}\n                            label=\"Code Exporter\"\n                            title=\"Toggle Code Exporter\"\n                        />\n                    </GraphiQL.Toolbar>\n                </GraphiQL>\n                {codeExporter}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('graphiql'));\n"],"sourceRoot":""}