<?php
/**
 * This contains the class for the EE HTML messenger.
 *
 * @since 4.5.0
 * @package Event Espresso
 * @subpackage messages
 */
if (!defined('EVENT_ESPRESSO_VERSION') )
	exit('NO direct script access allowed');

/**
 *
 * EE_Html_messenger class
 *
 * @since 4.3.0
 *
 * @package			Event Espresso
 * @subpackage		messages
 * @author			Darren Ethier
 */
class EE_Html_messenger extends EE_messenger  {


	/**
	 * The following are the properties that this messenger requires for displaying the html
	 */

	/**
	 * This is the html body generated by the template via the message type.
	 *
	 * @var string
	 */
	protected $_content;


	/**
	 * This is for the page title that gets displayed.  (Why use "subject"?  Because the "title" tag in html is equivalent to the "subject" of the page.
	 *
	 * @var string
	 */
	protected $_subject;




	public function __construct() {
		//set properties
		$this->name = 'html';
		$this->description = __('This messenger outputs a message to a browser for display.', 'event_espresso');
		$this->label = array(
			'singular' => __('html', 'event_espresso'),
			'plural' => __('html', 'event_espresso')
			);

		parent::__construct();
	}


	/**
	 * @see abstract declaration in EE_messenger for details.
	 */
	protected function _set_admin_pages() {
		$this->admin_registered_pages = array( 'events_edit' => true );
	}



	/**
	 * @see abstract declaration in EE_messenger for details.
	 */
	protected function _set_valid_shortcodes() {
		$this->_valid_shortcodes = array();
	}



	/**
	 * @see abstract declaration in EE_messenger for details.
	 */
	protected function _set_validator_config() {
		$this->_validator_config = array(
			'subject' => array(
				'shortcodes' => array('organization', 'primary_registration_details', 'event_author', 'primary_registration_details', 'recipient_details')
				),
			'content' => array(
				'shortcodes' => array( 'recipient_details', 'organization', 'event', 'ticket', 'venue', 'primary_registration_details', 'event_author', 'email','event_meta', 'recipient_list', 'transaction', 'datetime_list', 'question_list', 'datetime', 'question')
				),
			'attendee_list' => array(
				'shortcodes' => array('attendee', 'event_list', 'ticket_list'),
				'required' => array('[ATTENDEE_LIST]')
				),
			'event_list' => array(
				'shortcodes' => array('event', 'attendee_list', 'ticket_list', 'venue', 'datetime_list', 'attendee', 'primary_registration_details', 'primary_registration_list', 'event_author', 'recipient_details', 'recipient_list'),
				'required' => array('[EVENT_LIST]')
				),
			'ticket_list' => array(
				'shortcodes' => array('event_list', 'attendee_list', 'ticket', 'datetime_list','primary_registration_details', 'recipient_details'),
				'required' => array('[TICKET_LIST]')
				),
			'datetime_list' => array(
				'shortcodes' => array('datetime'),
				'required' => array('[DATETIME_LIST]')
				),
			'question_list' => array(
				'shortcodes' => array('question'),
				'required' => array('[QUESTION_LIST]')
				)
			);
	}



	/**
	 * get css file
	 *
	 * @since 4.5.0
	 *
	 * @param bool $url  return url or path
	 * @param mixed (string|bool) $type wpeditor|print|base|FALSE (default is the main css for html)
	 *
	 * @return string path to css file.
	 */
	public function get_inline_css_template( $url = TRUE, $type = FALSE ) {
		switch ( $type ) {

			case 'base' :
				$base = 'messages/messenger/assets/html/html-messenger-inline-base-css.template.css';
				break;

			case 'print' :
				$base = 'messages/messenger/assets/html/html-messenger-inline-print-css.template.css';
				break;

			case 'wpeditor' :
				$base = 'messages/messenger/assets/html/html-messenger-inline-wpeditor-css.template.css';
				break;

			default :
				$base = 'messages/messenger/assets/html/html-messenger-inline-css.template.css';
				break;
		}

		return $url ? apply_filters( 'FHEE__EE_Html_messenger__get_inline_css_template__css_url', EE_PLUGIN_DIR_URL . 'core/libraries/' . $base, $url, $type )  : apply_filters( 'FHEE__EE_Html_messenger__get_inline_css_template__css_path',EE_LIBRARIES . $base, $url, $type );
	}




	/**
	 * _set_template_fields
	 * This sets up the fields that a messenger requires for the message to go out.
	 *
	 * @access  protected
	 * @return void
	 */
	protected function _set_template_fields() {
		// any extra template fields that are NOT used by the messenger but will get used by a messenger field for shortcode replacement get added to the 'extra' key in an associated array indexed by the messenger field they relate to.  This is important for the Messages_admin to know what fields to display to the user.  Also, notice that the "values" are equal to the field type that messages admin will use to know what kind of field to display. The values ALSO have one index labeled "shortcode".  the values in that array indicate which ACTUAL SHORTCODE (i.e. [SHORTCODE]) is required in order for this extra field to be displayed.  If the required shortcode isn't part of the shortcodes array then the field is not needed and will not be displayed/parsed.
		$this->_template_fields = array(
			'subject' => array(
				'input' => 'text',
				'label' => __('Page Title', 'event_espresso'),
				'type' => 'string',
				'required' => TRUE,
				'validation' => TRUE,
				'css_class' => 'large-text',
				'format' => '%s'
				),
			'content' => '', //left empty b/c it is in the "extra array" but messenger still needs needs to know this is a field.
			'extra' => array(
				'content' => array(
					'main' => array(
						'input' => 'wp_editor',
						'label' => __('Main Content', 'event_espresso'),
						'type' => 'string',
						'required' => TRUE,
						'validation' => TRUE,
						'format' => '%s',
						'rows' => '15'
					),
					'event_list' => array(
						'input' => 'wp_editor',
						'label' => '[EVENT_LIST]',
						'type' => 'string',
						'required' => TRUE,
						'validation' => TRUE,
						'format' => '%s',
						'rows' => '15',
						'shortcodes_required' => array('[EVENT_LIST]')
						),
					'attendee_list' => array(
						'input' => 'textarea',
						'label' => '[ATTENDEE_LIST]',
						'type' => 'string',
						'required' => TRUE,
						'validation' => TRUE,
						'format' => '%s',
						'css_class' => 'large-text',
						'rows' => '5',
						'shortcodes_required' => array('[ATTENDEE_LIST]')
					),
					'ticket_list' => array(
						'input' => 'textarea',
						'label' => '[TICKET_LIST]',
						'type' => 'string',
						'required' => TRUE,
						'validation' => TRUE,
						'format' => '%s',
						'css_class' => 'large-text',
						'rows' => '10',
						'shortcodes_required' => array('[TICKET_LIST]')
						),
					'datetime_list' => array(
						'input' => 'textarea',
						'label' => '[DATETIME_LIST]',
						'type' => 'string',
						'required' => TRUE,
						'validation' => TRUE,
						'format' => '%s',
						'css_class' => 'large-text',
						'rows' => '10',
						'shortcodes_required' => array('[DATETIME_LIST]')
						),
					'question_list' => array(
						'input' => 'textarea',
						'label' => '[QUESTION_LIST]',
						'type' => 'string',
						'required' => TRUE,
						'validation' => TRUE,
						'format' => '%s',
						'css_class' => 'large-text',
						'rows' => '5',
						'shortcodes_required' => array('[QUESTION_LIST]')
					)
				)
			)
		);
	}





	/**
	 * _set_default_field_content
	 * set the _default_field_content property (what gets added in the default templates).
	 *
	 * @access protected
	 * @return void
	 */
	protected function _set_default_field_content() {
		$this->_default_field_content = array(
			'subject' => '',
			'content' => array(
				'main' => __('This contains the main content for the message going out.  It\'s specific to message type so you will want to replace this in the template', 'event_espresso'),
				'attendee_list' => __('This contains the formatting for each attendee in a attendee list', 'event_espresso'),
				'event_list' => __('This contains the formatting for each event in an event list', 'event_espresso'),
				'ticket_list' => __('This contains the formatting for each ticket in a ticket list.', 'event_espresso'),
				'datetime_list' => __('This contains the formatting for each datetime in a datetime list.', 'event_espresso'),
				'question_list' => __('This contains the formatting for each question and answer in a list of questions and answers for a registrant', 'event_espresso')
				)
			);
	}




	/**
	 * @see definition of this method in parent
	 *
	 * @since 4.5.0
	 *
	 */
	protected function _set_default_message_types() {
		//@todo this is where order_confirmation and invoice will go.
		$this->_default_message_types = array();
	}



	/**
	 * @see definition of this method in parent
	 *
	 * @since 4.5.0
	 */
	protected function _set_valid_message_types() {
		$this->_valid_message_types = array();
	}




	/**
	 * Displays the message in the browser.
	 *
	 * @since 4.5.0
	 *
	 * @return string.
	 */
	protected function _send_message() {
		$this->_template_args = array(
			'page_title' => html_entity_decode( $this->_subject, ENT_QUOTES, "UTF-8"),
			'base_css' => $this->get_inline_css_template(TRUE, 'base'),
			'print_css' => $this->get_inline_css_template(TRUE, 'print'),
			'main_css' => $this->get_inline_css_template(TRUE),
			'main_body' => apply_filters( 'FHEE__EE_Html_messenger___send_message__main_body', wpautop(stripslashes_deep( html_entity_decode($this->_content,  ENT_QUOTES,"UTF-8" ) )), $this->_content )
			);
		echo $this->_get_main_template();
		exit();
	}



	/**
	 * Overwrite parent _get_main_template for display_html purposes.
	 *
	 * @since  4.5.0
	 *
	 * @return string
	 */
	protected function _get_main_template( $preview = FALSE ) {
		$relative_path =  '/core/libraries/messages/messenger/assets/' . $this->name . '/';

		$wrapper_template_file = $this->name . '-messenger-main-wrapper.template.php';

		//require template helper
		EE_Registry::instance()->load_helper( 'Template' );
		return EEH_Template::locate_template( array( $relative_path . $wrapper_template_file, $wrapper_template_file ), $this->_template_args );
	}



	protected function _preview() { return $this->_send_message(); }


	protected function _set_admin_settings_fields() {}
}
