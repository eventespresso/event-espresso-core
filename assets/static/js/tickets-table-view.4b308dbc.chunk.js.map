{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/TicketRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/Checkbox.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/useHeaderRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/useBodyRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/formValidation.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useBulkEditFormConfig.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useSubmitForm.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/EditDetails.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/useOnDelete.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/Delete.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/EditModeButtons.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/FooterButtons.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/useOnSubmitPrices.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/EditTogether.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/TPCInstance.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useOnSubmit.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/EditSeparately.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useManageTPCStates.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/EditPrices.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/actions/Actions.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/TableView.tsx"],"names":["TicketRegistrationsLink","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","count","registrationCount","emphasizeZero","title","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","toaster","useSystemNotifications","getCappedQuantity","useCappedQuantity","onChange","useCallback","qty","a","parsedQuantity","parseInfinity","quantity","ticketId","isQtyAdjustedByCapacity","hasQtyChanged","info","message","value","cacheId","EditableName","className","testid","view","lineCount","onChangeName","name","tag","useRecalculateBasePrice","getTicket","useLazyTicket","getTicketPrices","useTicketPrices","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","tpcData","updatedTicket","price","existingBasePrice","getBasePrice","prices","priceModifiers","getPriceModifiers","newBasePriceAmount","calculateBasePrice","newBasePrice","isModified","order","isNew","newPrices","amount","relatedPriceIds","reverseCalculate","EditablePrice","useMoneyDisplay","afterAmount","beforeAmount","formatAmount","recalculateBasePrice","onChangePrice","Math","abs","useLockedTicketAction","alertContainer","showAlert","wrapperProps","useMemoStringify","isTicketLocked","isLocked","as","onClick","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","withCurrentUserCan","USE_ADVANCED_EDITOR","useVisibleTicketIds","visibleTicketIds","visibleEntityIds","useHeaderRowGenerator","stripeCell","useMemo","key","size","textAlign","idCell","nameCell","startCell","endCell","priceCell","quantityCell","soldCell","registrationsCell","actionsCell","filterState","displayStartOrEndDate","showBulkActions","cells","filter","Boolean","filterCellByStartOrEndDate","primary","type","useBodyRowGenerator","tickets","useTickets","findEntityByGuid","getLazyTicket","format","useTimeZoneTime","formatForSite","entityId","bgClassName","getTicketBackgroundColorClassName","statusClassName","ticketStatus","classNames","showValueOnMobile","bulkActionCheckboxCell","parseISO","startDate","ENTITY_LIST_DATE_TIME_FORMAT","endDate","sold","cellsData","R","addZebraStripesOnMobile","rowClassName","validate","values","yupToFinalFormErrors","validationSchema","yup","min","unitOptions","intervalsToOptions","DATE_INTERVALS","useBulkEditFormConfig","config","onSubmit","onSubmitFrom","form","restParams","adjacentFormItemProps","layout","debugFields","sections","icon","ProfileOutlined","fields","label","fieldType","CalendarOutlined","formControlProps","subFields","options","ControlOutlined","parseAsInfinity","max","useSubmitForm","onClose","useBulkEdit","getSelected","unSelectAll","allTickets","updateEntities","useBulkEditTickets","formData","input","formToBulkUpdateInput","sharedInput","uniqueInputs","map","uniqueInput","EditDetails","isOpen","formConfig","warning","useOnDelete","areTrashedTickets","bulkDelete","useBulkDeleteTickets","entityIds","deletePermanently","Delete","onDelete","useConfirmationDialog","onConfirm","onCancel","confirmationDialog","onOpen","useEffect","EditModeButtons","setEditMode","onClickTogether","onClickSeparate","display","alignItems","justifyContent","height","buttonText","orientation","FooterButtons","onReset","fullWidth","horizontalAlign","topBordered","buttonType","ButtonType","PRIMARY","useOnSubmitPrices","useDataState","mutateTicket","useMutateTicket","deletePrices","useBulkDeletePrices","relatedPrices","reduce","nonDefaultPrices","isNotDefault","getGuids","Promise","all","withTPCContext","addDefaultPrices","useAddDefaultPrices","TPCInstance","setTPCState","getData","sprintf","useOnSubmit","getDataStates","submitPrices","Object","dataState","EditSeparately","dataStates","useRef","current","useManageTPCStates","ticketIds","Instance","EditPrices","useState","editMode","closeOnOverlayClick","showAlertOnClose","action","setAction","useDisclosure","useTicketsListFilterState","status","isEditPricesDisabled","entitiesWithGuIdInArray","some","TicketsStatus","trashedOnly","disabled","onApply","show","Checkbox","defaultAction","SOLD_TICKET_ERROR_MESSAGE","variant","withBulkEdit","filteredTicketIds","useFilteredTicketIds","sortTickets","useReorderTickets","sortResponder","bodyRowGenerator","headerRowGenerator","domain","listId","ticketsList","onSort","tableCaption","tableId"],"mappings":"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","file":"static/js/tickets-table-view.4b308dbc.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nexport const TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useTicketMutator, useCappedQuantity } from '@eventespresso/edtr-services';\nimport { useSystemNotifications } from '@eventespresso/toaster';\n\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst toaster = useSystemNotifications();\n\tconst getCappedQuantity = useCappedQuantity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (qty) => {\n\t\t\tconst parsedQuantity = parseInfinity(qty);\n\n\t\t\tconst quantity = getCappedQuantity({ quantity: parsedQuantity, ticketId: ticket.id });\n\n\t\t\tconst isQtyAdjustedByCapacity = quantity !== parsedQuantity;\n\t\t\tconst hasQtyChanged = quantity !== ticket.quantity;\n\n\t\t\tif (isQtyAdjustedByCapacity) {\n\t\t\t\ttoaster.info({\n\t\t\t\t\tmessage: __(\n\t\t\t\t\t\t'Ticket quantity has been adjusted because it cannot be more than the related event date capacity.'\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (hasQtyChanged || isQtyAdjustedByCapacity) {\n\t\t\t\tawait updateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[getCappedQuantity, ticket.id, ticket.quantity, toaster, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\t// Since ticket quantity is restricted by related date capacity\n\t\t\t// it's possible that the quantity has exactly the same value as the min date capacity\n\t\t\t// inline edit uses the internal state to update the value in UI\n\t\t\t// Since the quantity and capacity can be same, it can result in stale value being shown\n\t\t\t// passing a key ensures that UI updates with the correct value\n\t\t\tkey={ticket.cacheId}\n\t\t\tdata-testid='ee-ticket-inline-qty'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\ninterface EditableNameProps extends TicketItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: ticket,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={ticket.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice, getPriceModifiers } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useLazyTicket, useTicketMutator, useTicketPrices } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => Promise<void>;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\tconst getTicket = useLazyTicket();\n\tconst getTicketPrices = useTicketPrices();\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId, getTicket, getTicketPrices });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\tasync (ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst existingBasePrice = getBasePrice(tpcData.prices);\n\t\t\tconst priceModifiers = getPriceModifiers(tpcData.prices);\n\t\t\t// get the updated base price amount\n\t\t\tconst newBasePriceAmount = calculateBasePrice(tpcData.ticket?.price, tpcData.prices);\n\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tconst newBasePrice = existingBasePrice\n\t\t\t\t? // add the exiting base price\n\t\t\t\t  { ...existingBasePrice, isModified: true }\n\t\t\t\t: // add the default price\n\t\t\t\t  { ...defaultBasePrice, order: 1, isNew: true };\n\n\t\t\tconst newPrices = [\n\t\t\t\t// update the base price amount\n\t\t\t\t{ ...newBasePrice, amount: newBasePriceAmount },\n\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t// may be their taxation system works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t...priceModifiers,\n\t\t\t];\n\n\t\t\tconst relatedPriceIds = await mutatePrices(newPrices);\n\n\t\t\tawait updateTicket({\n\t\t\t\t// this is the ticket prices amount\n\t\t\t\tprice: ticketPrice,\n\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\treverseCalculate: true,\n\t\t\t\t// Make sure related prices are updated\n\t\t\t\tprices: relatedPriceIds,\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { Clickable } from '@eventespresso/adapters';\nimport { InlineEditCurrency } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { useMoneyDisplay } from '@eventespresso/services';\nimport { isLocked } from '@eventespresso/predicates';\nimport { useLockedTicketAction } from '@eventespresso/tpc';\n\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\nimport './style.scss';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst { afterAmount, beforeAmount, formatAmount } = useMoneyDisplay();\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = Math.abs(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\tconst { alertContainer, showAlert } = useLockedTicketAction(ticket, 'COPY/TRASH');\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isTicketLocked = isLocked(ticket);\n\n\tconst tooltip = __('edit ticket total…');\n\n\treturn isTicketLocked ? (\n\t\t<Clickable as='div' className='ee-ticket-editable-price' onClick={showAlert}>\n\t\t\t<CurrencyDisplay className={className} value={ticket.price} />\n\t\t\t{alertContainer}\n\t\t</Clickable>\n\t) : (\n\t\t<InlineEditCurrency\n\t\t\tafterAmount={afterAmount}\n\t\t\tamount={ticket.price}\n\t\t\tbeforeAmount={beforeAmount}\n\t\t\tformatAmount={formatAmount}\n\t\t\tid={ticket.id}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import { ActionCheckbox } from '@eventespresso/ee-components';\nimport { USE_ADVANCED_EDITOR } from '@eventespresso/constants';\nimport { useVisibleTicketIds } from '@eventespresso/edtr-services';\nimport { withCurrentUserCan } from '@eventespresso/services';\nimport type { ActionCheckboxProps } from '@eventespresso/ee-components';\n\nconst Checkbox: React.FC<ActionCheckboxProps> = (props) => {\n\tconst [visibleTicketIds] = useVisibleTicketIds();\n\n\treturn <ActionCheckbox {...props} visibleEntityIds={visibleTicketIds} />;\n};\n\nexport default withCurrentUserCan(USE_ADVANCED_EDITOR)(Checkbox);\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { filterCellByStartOrEndDate } from '@eventespresso/edtr-services';\n\nimport type { CellData } from '@eventespresso/ui-components';\nimport type { HeaderRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport Checkbox from './Checkbox';\n\ntype TicketsTableHeaderRowGen = HeaderRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useHeaderRowGenerator = (): TicketsTableHeaderRowGen => {\n\tconst stripeCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-entity-list-status-stripe',\n\t\t\tkey: 'stripe',\n\t\t\tsize: 'nano',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: '',\n\t\t}),\n\t\t[]\n\t);\n\n\tconst idCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'id',\n\t\t\tsize: 'micro',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('ID'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst nameCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'name',\n\t\t\tsize: 'huge',\n\t\t\tvalue: __('Name'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst startCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'start',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Goes on Sale')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('On Sale')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst endCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'end',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Sale Ends')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Ends')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst priceCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'price',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Price'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst quantityCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'quantity',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Quantity'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst soldCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'sold',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Sold'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst registrationsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'registrations',\n\t\t\tsize: 'smaller',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Registrations')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Regs')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst actionsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'actions',\n\t\t\tsize: 'big',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Actions')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Actions')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\treturn useCallback<TicketsTableHeaderRowGen>(\n\t\t(filterState) => {\n\t\t\tconst { displayStartOrEndDate, showBulkActions } = filterState;\n\n\t\t\tconst checkboxCell: CellData = showBulkActions && {\n\t\t\t\tkey: 'checkbox',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: (\n\t\t\t\t\t<div className={'ee-rspnsv-table-hide-on-mobile'}>\n\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tcheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t];\n\n\t\t\tconst cells = cellsData\n\t\t\t\t.filter(\n\t\t\t\t\t// removes falsy values\n\t\t\t\t\tBoolean\n\t\t\t\t)\n\t\t\t\t.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: 'ee-editor-ticket-list-items-header-row',\n\t\t\t\tkey: 'ticket-header-row',\n\t\t\t\tprimary: true,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[\n\t\t\tidCell,\n\t\t\tactionsCell,\n\t\t\tendCell,\n\t\t\tnameCell,\n\t\t\tpriceCell,\n\t\t\tquantityCell,\n\t\t\tregistrationsCell,\n\t\t\tsoldCell,\n\t\t\tstartCell,\n\t\t\tstripeCell,\n\t\t]\n\t);\n};\n\nexport default useHeaderRowGenerator;\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { parseISO } from 'date-fns';\nimport * as R from 'ramda';\n\nimport { addZebraStripesOnMobile, CellData } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { filterCellByStartOrEndDate, useTickets, useLazyTicket } from '@eventespresso/edtr-services';\nimport { ENTITY_LIST_DATE_TIME_FORMAT } from '@eventespresso/constants';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport { getTicketBackgroundColorClassName, ticketStatus } from '@eventespresso/helpers';\nimport { findEntityByGuid } from '@eventespresso/predicates';\nimport type { EntityId } from '@eventespresso/data';\nimport type { BodyRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport TicketActionsMenu from '@edtrUI/tickets/ticketsList/actionsMenu/TicketActionsMenu';\nimport TicketQuantity from '../cardView/TicketQuantity';\nimport { EditableName } from '../editable';\nimport { TicketRegistrationsLink } from '../TicketRegistrationsLink';\nimport Checkbox from './Checkbox';\n\ntype TicketsTableBodyRowGen = BodyRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useBodyRowGenerator = (): TicketsTableBodyRowGen => {\n\tconst tickets = useTickets();\n\tconst getTicket = useCallback((id: EntityId) => findEntityByGuid(tickets)(id), [tickets]);\n\tconst getLazyTicket = useLazyTicket();\n\tconst { formatForSite: format } = useTimeZoneTime();\n\n\treturn useCallback<TicketsTableBodyRowGen>(\n\t\t({ entityId, filterState }) => {\n\t\t\tconst ticket = getTicket(entityId) || getLazyTicket(entityId);\n\t\t\tconst { displayStartOrEndDate, showBulkActions } = filterState;\n\n\t\t\tconst bgClassName = getTicketBackgroundColorClassName(ticket);\n\t\t\tconst id = ticket.dbId || 0;\n\t\t\tconst statusClassName = ticketStatus(ticket);\n\n\t\t\tconst stripeCell: CellData = {\n\t\t\t\tclassName: classNames('ee-entity-list-status-stripe', bgClassName),\n\t\t\t\tkey: 'stripe',\n\t\t\t\tshowValueOnMobile: true,\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: ticket.name,\n\t\t\t};\n\n\t\t\tconst bulkActionCheckboxCell: CellData = showBulkActions && {\n\t\t\t\tkey: 'cell',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <Checkbox dbId={ticket.dbId} id={ticket.id} />,\n\t\t\t};\n\n\t\t\tconst idCell: CellData = {\n\t\t\t\tkey: 'id',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: id,\n\t\t\t};\n\n\t\t\tconst nameCell: CellData = {\n\t\t\t\tclassName: 'ee-col-name ee-rspnsv-table-hide-on-mobile',\n\t\t\t\tkey: 'name',\n\t\t\t\tsize: 'huge',\n\t\t\t\tvalue: (\n\t\t\t\t\t<EditableName\n\t\t\t\t\t\tclassName='ee-entity-name ee-entity-list-text ee-focus-priority-5'\n\t\t\t\t\t\tdata-testid={`ee-entity-list-view-row-editable-${ticket.dbId}`}\n\t\t\t\t\t\tentity={ticket}\n\t\t\t\t\t\tview='table'\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst startCell: CellData = {\n\t\t\t\tkey: 'start',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(ticket.startDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst endCell: CellData = {\n\t\t\t\tkey: 'end',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(ticket.endDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst priceCell: CellData = {\n\t\t\t\tkey: 'price',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <CurrencyDisplay value={ticket.price} />,\n\t\t\t};\n\n\t\t\tconst soldCell: CellData = {\n\t\t\t\tkey: 'sold',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: ticket.sold,\n\t\t\t};\n\n\t\t\tconst quantityCell: CellData = {\n\t\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\t\tkey: 'quantity',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst registrationsCell: CellData = {\n\t\t\t\tkey: 'registrations',\n\t\t\t\tsize: 'smaller',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t};\n\n\t\t\tconst actionsCell: CellData = {\n\t\t\t\tkey: 'actions',\n\t\t\t\tsize: 'big',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketActionsMenu entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tbulkActionCheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t].filter(\n\t\t\t\t// removes falsy values\n\t\t\t\tBoolean\n\t\t\t);\n\n\t\t\tconst exclude = ['row', 'stripe', 'name', 'actions'];\n\n\t\t\tconst cells = R.pipe(\n\t\t\t\tR.filter(filterCellByStartOrEndDate(displayStartOrEndDate)),\n\t\t\t\taddZebraStripesOnMobile(exclude)\n\t\t\t)(cellsData);\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: `ee-editor-ticket-list-view-row ${statusClassName}`,\n\t\t\t\t'data-testid': `ee-ticket-list-view-row-${ticket.dbId}`,\n\t\t\t\tid: `ee-editor-ticket-list-view-row-${ticket.id}`,\n\t\t\t\tkey: `row-${ticket.id}`,\n\t\t\t\trowClassName: 'ee-entity-list-item',\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[format, getLazyTicket, getTicket]\n\t);\n};\n\nexport default useBodyRowGenerator;\n","import { __ } from '@eventespresso/i18n';\nimport * as yup from 'yup';\n\nimport { yupToFinalFormErrors } from '@eventespresso/form';\nimport { BulkEditFormShape } from './types';\n\nexport const validate = async (values: BulkEditFormShape): Promise<any> => {\n\treturn await yupToFinalFormErrors(validationSchema, values);\n};\n\nconst validationSchema = yup.object({\n\tname: yup.string().min(3, () => __('Name must be at least three characters')),\n});\n","import { useMemo, useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\nimport * as R from 'ramda';\n\nimport { CalendarOutlined, ControlOutlined, ProfileOutlined } from '@eventespresso/icons';\nimport { intervalsToOptions, Intervals, DATE_INTERVALS } from '@eventespresso/dates';\nimport type { EspressoFormProps } from '@eventespresso/form';\n\nimport { validate } from './formValidation';\nimport type { BulkEditFormShape } from './types';\nimport { useMemoStringify } from '@eventespresso/hooks';\n\ntype DateFormConfig = EspressoFormProps<BulkEditFormShape>;\n\nconst unitOptions = intervalsToOptions(\n\tR.pick<Intervals, keyof Intervals>(['months', 'weeks', 'days', 'hours', 'minutes'], DATE_INTERVALS),\n\ttrue\n);\n\nconst useBulkEditFormConfig = (config?: EspressoFormProps<BulkEditFormShape>): DateFormConfig => {\n\tconst { onSubmit } = config;\n\n\tconst onSubmitFrom: DateFormConfig['onSubmit'] = useCallback(\n\t\t(values, form, ...restParams) => {\n\t\t\treturn onSubmit(values, form, ...restParams);\n\t\t},\n\t\t[onSubmit]\n\t);\n\n\tconst adjacentFormItemProps = useMemoStringify({\n\t\tclassName: 'ee-form-item-pair',\n\t});\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\t...config,\n\t\t\tonSubmit: onSubmitFrom,\n\t\t\tvalidate,\n\t\t\tlayout: 'horizontal',\n\t\t\tdebugFields: ['values', 'errors'],\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tname: 'basics',\n\t\t\t\t\ticon: ProfileOutlined,\n\t\t\t\t\ttitle: __('Basics'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tlabel: __('Name'),\n\t\t\t\t\t\t\tfieldType: 'text',\n\t\t\t\t\t\t\tmin: 3,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'description',\n\t\t\t\t\t\t\tlabel: __('Description'),\n\t\t\t\t\t\t\tfieldType: 'simple-text-editor',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'dates',\n\t\t\t\t\ticon: CalendarOutlined,\n\t\t\t\t\ttitle: __('Dates'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'shiftDates',\n\t\t\t\t\t\t\tlabel: __('Shift dates'),\n\t\t\t\t\t\t\tfieldType: 'group',\n\t\t\t\t\t\t\tformControlProps: {\n\t\t\t\t\t\t\t\tclassName: 'shift-dates',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsubFields: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'unit',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: unitOptions,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('earlier'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'earlier',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('later'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'later',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'details',\n\t\t\t\t\ticon: ControlOutlined,\n\t\t\t\t\ttitle: __('Details'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'quantity',\n\t\t\t\t\t\t\tlabel: __('Quantity For Sale'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'uses',\n\t\t\t\t\t\t\tlabel: __('Number of Uses'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'min',\n\t\t\t\t\t\t\tlabel: __('Minimum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'max',\n\t\t\t\t\t\t\tlabel: __('Maximum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'isRequired',\n\t\t\t\t\t\t\tlabel: __('Required Ticket'),\n\t\t\t\t\t\t\tfieldType: 'switch',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\t[adjacentFormItemProps, config, onSubmitFrom]\n\t);\n};\n\nexport default useBulkEditFormConfig;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useTickets, useBulkEditTickets, formToBulkUpdateInput, useCappedQuantity } from '@eventespresso/edtr-services';\n\nimport type { BulkEditFormShape } from './types';\n\ntype Callback = (values: BulkEditFormShape) => Promise<void>;\n\nconst useSubmitForm = (onClose: VoidFunction): Callback => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst allTickets = useTickets();\n\tconst { updateEntities } = useBulkEditTickets();\n\tconst getCappedQuantity = useCappedQuantity();\n\n\treturn useCallback<Callback>(\n\t\tasync (formData) => {\n\t\t\t// pull the shutter down\n\t\t\tonClose();\n\t\t\t// prepare mutation input from data\n\t\t\tconst input = formToBulkUpdateInput(formData, allTickets, getSelected());\n\n\t\t\t// if quantity is changed\n\t\t\tif ('quantity' in input.sharedInput) {\n\t\t\t\t// restrict quantity by related date capacity\n\t\t\t\tinput.uniqueInputs = input.uniqueInputs.map((uniqueInput) => {\n\t\t\t\t\tconst quantity = getCappedQuantity({\n\t\t\t\t\t\tquantity: input.sharedInput.quantity,\n\t\t\t\t\t\tticketId: uniqueInput.id,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn { ...uniqueInput, quantity };\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// back to basics\n\t\t\tunSelectAll();\n\t\t\t// do the thing\n\t\t\tawait updateEntities(input);\n\t\t},\n\t\t[allTickets, getCappedQuantity, getSelected, onClose, unSelectAll, updateEntities]\n\t);\n};\n\nexport default useSubmitForm;\n","import { __ } from '@eventespresso/i18n';\n\nimport { BulkEditDetails } from '@eventespresso/ee-components';\nimport useBulkEditFormConfig from './useBulkEditFormConfig';\nimport useSubmitForm from './useSubmitForm';\n\ntype EditDetailsProps = {\n\tisOpen: boolean;\n\tonClose: VoidFunction;\n};\n\nconst EditDetails: React.FC<EditDetailsProps> = ({ onClose, isOpen }) => {\n\tconst onSubmit = useSubmitForm(onClose);\n\tconst formConfig = useBulkEditFormConfig({ onSubmit });\n\n\treturn (\n\t\t<BulkEditDetails\n\t\t\tformConfig={formConfig}\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={__('Bulk edit ticket details')}\n\t\t\twarning={__('any changes will be applied to ALL of the selected tickets.')}\n\t\t/>\n\t);\n};\n\nexport default EditDetails;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useBulkDeleteTickets } from '@eventespresso/edtr-services';\n\nimport type { OnDeleteProps } from './types';\n\ntype OnDelete = (props: OnDeleteProps) => VoidFunction;\n\nconst useOnDelete: OnDelete = ({ areTrashedTickets, onClose }) => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst bulkDelete = useBulkDeleteTickets();\n\treturn useCallback<VoidFunction>(() => {\n\t\t// pull the shutter down\n\t\tonClose();\n\t\t// back to basics\n\t\tunSelectAll();\n\n\t\t// goodbye folks :wave:\n\t\tbulkDelete({ entityIds: getSelected(), deletePermanently: areTrashedTickets });\n\t}, [areTrashedTickets, bulkDelete, getSelected, onClose, unSelectAll]);\n};\n\nexport default useOnDelete;\n","import { useEffect } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { useConfirmationDialog } from '@eventespresso/ui-components';\nimport useOnDelete from './useOnDelete';\nimport { OnDeleteProps } from './types';\n\nconst Delete: React.FC<OnDeleteProps> = ({ areTrashedTickets, onClose }) => {\n\tconst onDelete = useOnDelete({ areTrashedTickets, onClose });\n\n\tconst { confirmationDialog, onOpen } = useConfirmationDialog({\n\t\tmessage: areTrashedTickets\n\t\t\t? __('Are you sure you want to permanently delete these tickets? This action can NOT be undone!')\n\t\t\t: __('Are you sure you want to trash these tickets?'),\n\t\ttitle: areTrashedTickets ? __('Delete tickets permanently') : __('Trash tickets'),\n\t\tonConfirm: onDelete,\n\t\tonCancel: onClose,\n\t});\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tuseEffect(() => onOpen(), []);\n\n\treturn <>{confirmationDialog}</>;\n};\n\nexport default Delete;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { Button, Divider } from '@eventespresso/ui-components';\nimport { Box } from '@eventespresso/adapters';\nimport type { EditMode } from '../types';\n\nexport interface EditModeButtonsProps {\n\tsetEditMode: (editMode: EditMode) => void;\n}\n\nexport const EditModeButtons: React.FC<EditModeButtonsProps> = ({ setEditMode }) => {\n\tconst onClickTogether = useCallback(() => setEditMode('together'), [setEditMode]);\n\tconst onClickSeparate = useCallback(() => setEditMode('separate'), [setEditMode]);\n\n\treturn (\n\t\t<Box display='flex' alignItems='center' justifyContent='center' height='100%'>\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickTogether} buttonText={__('Edit all prices together')} />\n\t\t\t\t<p>{__('Edit all the selected ticket prices dynamically')}</p>\n\t\t\t</Box>\n\t\t\t<Divider orientation='vertical' />\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickSeparate} buttonText={__('Edit prices individually')} />\n\t\t\t\t<p>{__('Edit prices for each ticket individually')}</p>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n","import { __ } from '@eventespresso/i18n';\n\nimport { Button, ButtonRow, ButtonType } from '@eventespresso/ui-components';\n\nexport interface FooterButtonsProps {\n\tonSubmit: VoidFunction;\n\tonReset?: VoidFunction;\n\tonCancel?: VoidFunction;\n}\n\nexport const FooterButtons: React.FC<FooterButtonsProps> = ({ onSubmit, onReset, onCancel }) => {\n\treturn (\n\t\t<ButtonRow fullWidth horizontalAlign='right' topBordered>\n\t\t\t{onReset && <Button buttonText={__('Reset')} onClick={onReset} type='reset' />}\n\t\t\t{onCancel && <Button buttonText={__('Cancel')} onClick={onCancel} />}\n\t\t\t<Button buttonText={__('Submit')} buttonType={ButtonType.PRIMARY} onClick={onSubmit} type='submit' />\n\t\t</ButtonRow>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { Price, useTicketPrices, useBulkDeletePrices } from '@eventespresso/edtr-services';\nimport { useDataState, useMutateTicket } from '@eventespresso/tpc';\nimport { isNotDefault, getGuids } from '@eventespresso/predicates';\nimport { useBulkEdit } from '@eventespresso/services';\n\nconst useOnSubmitPrices = (onClose: VoidFunction): (() => Promise<void>) => {\n\tconst { prices, ticket } = useDataState();\n\tconst { getSelected } = useBulkEdit();\n\n\tconst mutateTicket = useMutateTicket();\n\n\tconst getTicketPrices = useTicketPrices();\n\n\tconst deletePrices = useBulkDeletePrices();\n\n\t// Async to make sure that prices are handled before updating the ticket.\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\n\t\t// prices related to all the selected tickets\n\t\tconst relatedPrices = getSelected().reduce<Price[]>(\n\t\t\t(prices, ticketId) => [...prices, ...getTicketPrices(ticketId)],\n\t\t\t[]\n\t\t);\n\n\t\t// prices may contain default taxes,\n\t\t// we need to make sure they are not deleted.\n\t\tconst nonDefaultPrices = relatedPrices.filter(isNotDefault);\n\t\t// delete all non-default prices\n\t\tawait deletePrices(getGuids(nonDefaultPrices));\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update thei price information\n\t\t\tgetSelected().map(async (ticketId) => {\n\t\t\t\tawait mutateTicket({\n\t\t\t\t\t...ticket,\n\t\t\t\t\tid: ticketId,\n\t\t\t\t\tisModified: true,\n\t\t\t\t\tprices,\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}, [deletePrices, getSelected, getTicketPrices, mutateTicket, onClose, prices, ticket]);\n};\n\nexport default useOnSubmitPrices;\n","import { useEffect } from 'react';\n\nimport { TicketPriceCalculator, useAddDefaultPrices, withContext as withTPCContext } from '@eventespresso/tpc';\n\nimport { FooterButtons } from '../buttons';\nimport { EditPricesBaseProps } from '../types';\nimport useOnSubmitPrices from './useOnSubmitPrices';\n\nconst EditTogether: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst addDefaultPrices = useAddDefaultPrices();\n\t// add default prices on mount\n\tuseEffect(() => {\n\t\taddDefaultPrices();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst onSubmit = useOnSubmitPrices(onClose);\n\n\treturn (\n\t\t<>\n\t\t\t<TicketPriceCalculator />\n\t\t\t<FooterButtons onSubmit={onSubmit} onReset={addDefaultPrices} />\n\t\t</>\n\t);\n};\n\nexport default withTPCContext(EditTogether, { ticketId: '' });\n","import { useEffect } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { TicketPriceCalculator, useDataState } from '@eventespresso/tpc';\nimport { ManageTPCStates } from './useManageTPCStates';\n\nexport interface TPCInstanceProps {\n\tsetTPCState: ManageTPCStates['setTPCState'];\n}\n\nexport const TPCInstance: React.FC<TPCInstanceProps> = ({ setTPCState }) => {\n\tconst { ticket, getData } = useDataState();\n\n\tuseEffect(() => {\n\t\tsetTPCState(getData());\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [getData]);\n\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t{sprintf(\n\t\t\t\t\t/* translators: %s ticket name */\n\t\t\t\t\t__('Edit prices for Ticket: %s'),\n\t\t\t\t\tticket.name\n\t\t\t\t)}\n\t\t\t</header>\n\t\t\t<TicketPriceCalculator />\n\t\t</>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { useOnSubmitPrices } from '@eventespresso/tpc';\nimport { ManageTPCStates } from './useManageTPCStates';\n\nconst useOnSubmit = (onClose: VoidFunction, getDataStates: ManageTPCStates['getDataStates']): (() => Promise<void>) => {\n\tconst submitPrices = useOnSubmitPrices();\n\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update their price information\n\t\t\tObject.values(getDataStates()).map(async (dataState) => {\n\t\t\t\t// Finally update the ticket and its price relation\n\t\t\t\tawait submitPrices(dataState);\n\t\t\t})\n\t\t);\n\t}, [getDataStates, onClose, submitPrices]);\n};\n\nexport default useOnSubmit;\n","import { withContext as withTPCContext } from '@eventespresso/tpc';\nimport { useBulkEdit } from '@eventespresso/services';\n\nimport { EditPricesBaseProps } from '../types';\nimport { TPCInstance } from './TPCInstance';\nimport { FooterButtons } from '../buttons';\nimport { useManageTPCStates } from './useManageTPCStates';\nimport useOnSubmit from './useOnSubmit';\n\nconst EditSeparately: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst { getSelected } = useBulkEdit();\n\n\tconst { getDataStates, setTPCState } = useManageTPCStates();\n\n\tconst onSubmit = useOnSubmit(onClose, getDataStates);\n\n\tconst ticketIds = getSelected();\n\n\treturn (\n\t\t<>\n\t\t\t{ticketIds.map<React.ReactNode>((ticketId) => {\n\t\t\t\tconst Instance = withTPCContext(TPCInstance, { ticketId });\n\t\t\t\treturn <Instance key={ticketId} setTPCState={setTPCState} />;\n\t\t\t})}\n\t\t\t<FooterButtons onSubmit={onSubmit} onCancel={onClose} />\n\t\t</>\n\t);\n};\n\nexport default EditSeparately;\n","import { useCallback, useMemo, useRef } from 'react';\n\nimport { DataState } from '@eventespresso/tpc';\nimport { AnyObject } from '@eventespresso/utils';\n\nexport interface ManageTPCStates {\n\tsetTPCState: (dataState: DataState) => void;\n\tgetDataStates: () => AnyObject<DataState>;\n}\n\nexport const useManageTPCStates = (): ManageTPCStates => {\n\t/**\n\t * This contains the data for all TPC instances.\n\t *\n\t * Since this is not used anywhere in the view, rather only used on final submission\n\t * useRef is made for this, to avoid any unnecessary re-renders\n\t */\n\tconst dataStates = useRef<AnyObject<DataState>>({});\n\n\tconst setTPCState = useCallback<ManageTPCStates['setTPCState']>(\n\t\t(dataState) => {\n\t\t\tdataStates.current = { ...dataStates.current, [dataState?.ticket?.id]: dataState };\n\t\t},\n\t\t[dataStates]\n\t);\n\n\tconst getDataStates = useCallback<ManageTPCStates['getDataStates']>(() => dataStates.current, [dataStates]);\n\n\treturn useMemo(() => ({ setTPCState, getDataStates }), [setTPCState, getDataStates]);\n};\n","import { useState } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityEditModal } from '@eventespresso/ui-components';\nimport { EditModeButtons } from './buttons';\nimport { EditTogether } from './editTogether';\nimport { EditSeparately } from './editSeparately';\nimport type { EditMode, EditPricesBaseProps } from './types';\n\nconst EditPrices: React.FC<EditPricesBaseProps> = ({ onClose, isOpen }) => {\n\tconst [editMode, setEditMode] = useState<EditMode>();\n\n\treturn (\n\t\t<EntityEditModal\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\tcloseOnOverlayClick={true}\n\t\t\ttitle={__('Bulk edit ticket prices')}\n\t\t\tshowAlertOnClose={false}\n\t\t>\n\t\t\t{!editMode && <EditModeButtons setEditMode={setEditMode} />}\n\t\t\t{editMode === 'together' && <EditTogether onClose={onClose} />}\n\t\t\t{editMode === 'separate' && <EditSeparately onClose={onClose} />}\n\t\t</EntityEditModal>\n\t);\n};\n\nexport default EditPrices;\n","import { useState, useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { BulkActions } from '@eventespresso/ee-components';\nimport { Collapsible, ErrorMessage } from '@eventespresso/ui-components';\nimport { entitiesWithGuIdInArray, TicketsStatus } from '@eventespresso/predicates';\nimport { SOLD_TICKET_ERROR_MESSAGE } from '@eventespresso/tpc';\nimport { USE_ADVANCED_EDITOR } from '@eventespresso/constants';\nimport { useDisclosure, useMemoStringify } from '@eventespresso/hooks';\nimport { useTickets, useTicketsListFilterState } from '@eventespresso/edtr-services';\nimport { withCurrentUserCan, useBulkEdit } from '@eventespresso/services';\nimport type { BulkActionsProps } from '@eventespresso/ui-components';\n\nimport Checkbox from '../../tableView/Checkbox';\nimport { EditDetails } from '../details';\nimport { Delete } from '../delete';\nimport { EditPrices } from '../prices';\n\ntype Action = 'edit-details' | 'delete' | 'edit-prices' | '';\n\nconst Actions: React.FC = () => {\n\tconst [action, setAction] = useState<Action>('');\n\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst { status, showBulkActions } = useTicketsListFilterState();\n\tconst { getSelected } = useBulkEdit();\n\tconst allTickets = useTickets();\n\n\tconst isEditPricesDisabled = useMemo(() => {\n\t\tconst selectedTickets = entitiesWithGuIdInArray(allTickets, getSelected());\n\t\tconst isSoldTicketSelected = selectedTickets.some((ticket) => Boolean(ticket.sold));\n\t\treturn isSoldTicketSelected;\n\t}, [allTickets, getSelected]);\n\n\tconst areTrashedTickets = status === TicketsStatus.trashedOnly;\n\n\tconst options = useMemoStringify([\n\t\t{\n\t\t\tvalue: '',\n\t\t\tlabel: __('bulk actions'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-details',\n\t\t\tlabel: __('edit ticket details'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'delete',\n\t\t\tlabel: areTrashedTickets ? __('delete tickets') : __('trash tickets'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-prices',\n\t\t\tlabel: __('edit ticket prices'),\n\t\t\tdisabled: isEditPricesDisabled,\n\t\t},\n\t]);\n\n\tconst onApply = useCallback<BulkActionsProps<Action>['onApply']>(\n\t\t(action) => {\n\t\t\tsetAction(action);\n\t\t\tonOpen();\n\t\t},\n\t\t[onOpen]\n\t);\n\n\treturn (\n\t\t<Collapsible show={showBulkActions}>\n\t\t\t<BulkActions\n\t\t\t\tCheckbox={Checkbox}\n\t\t\t\tdefaultAction=''\n\t\t\t\tid={'ee-bulk-edit-tickets-actions'}\n\t\t\t\tonApply={isEditPricesDisabled ? null : onApply}\n\t\t\t\toptions={options}\n\t\t\t/>\n\t\t\t{isOpen && (\n\t\t\t\t<>\n\t\t\t\t\t{action === 'edit-details' && <EditDetails isOpen={true} onClose={onClose} />}\n\t\t\t\t\t{action === 'delete' && <Delete areTrashedTickets={areTrashedTickets} onClose={onClose} />}\n\t\t\t\t\t{action === 'edit-prices' && <EditPrices isOpen={true} onClose={onClose} />}\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<ErrorMessage message={isEditPricesDisabled && SOLD_TICKET_ERROR_MESSAGE} variant='subtle' />\n\t\t</Collapsible>\n\t);\n};\n\nexport default withCurrentUserCan(USE_ADVANCED_EDITOR)(Actions);\n","import { __ } from '@eventespresso/i18n';\n\nimport { EntityTable } from '@eventespresso/ee-components';\nimport useHeaderRowGenerator from './useHeaderRowGenerator';\nimport useBodyRowGenerator from './useBodyRowGenerator';\nimport {\n\tticketsList,\n\tdomain,\n\tuseFilteredTicketIds,\n\tuseReorderTickets,\n\tuseTicketsListFilterState,\n} from '@eventespresso/edtr-services';\nimport { withBulkEdit } from '@eventespresso/services';\nimport { Actions as BulkEditActions } from '../bulkEdit';\n\n/**\n * Displays tickets in a standard list table like view\n */\nconst TableView: React.FC = () => {\n\tconst filterState = useTicketsListFilterState();\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\tconst { sortResponder: sortTickets } = useReorderTickets(filteredTicketIds);\n\n\tconst bodyRowGenerator = useBodyRowGenerator();\n\tconst headerRowGenerator = useHeaderRowGenerator();\n\n\treturn (\n\t\t<>\n\t\t\t<BulkEditActions />\n\t\t\t<EntityTable\n\t\t\t\tbodyRowGenerator={bodyRowGenerator}\n\t\t\t\tdomain={domain}\n\t\t\t\tentityIds={filteredTicketIds}\n\t\t\t\tfilterState={filterState}\n\t\t\t\theaderRowGenerator={headerRowGenerator}\n\t\t\t\tlistId={ticketsList}\n\t\t\t\tonSort={sortTickets}\n\t\t\t\ttableCaption={__('Tickets')}\n\t\t\t\ttableId='ticket-entities-table-view'\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default withBulkEdit(TableView);\n"],"sourceRoot":""}