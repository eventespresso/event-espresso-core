{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/datetimes/datesList/DateRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCapacity.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDatesActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/actionsMenu/DateActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCardSidebar.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/DateSoldLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateDetailsPanel.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDateCardDetailsItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/Details.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCard.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/CardView.tsx"],"names":["DateRegistrationsLink","datetime","regListUrl","useRegistrationsLink","datetime_id","dbId","tooltip","__","href","DateCapacity","entity","updateEntity","useDatetimeMutator","id","useUpdateTicketQtyByCapacity","createBulkQtyUpdateInput","doQtyBulkUpdate","onChange","useCallback","cap","a","capacity","parseInfinity","input","sprintf","value","useDatesActionMenuItems","useEntityActionsMenuItems","DateActionsMenu","props","menuItems","EditableName","className","testid","view","lineCount","onChangeName","name","tag","DateCardSidebar","date","displayStartOrEndDate","useDatesListFilterState","siteTimeToUtc","useTimeZoneTime","start","end","startDate","toISOString","endDate","statusText","getDatetimeStatusTextLabel","labels","useMemo","headerFuture","headerPast","isExpired","displayDate","header","popoverPlacement","DateSoldLink","_reg_status","QueryURLRegStatus","APPROVED","sold","DateDetailsPanel","details","label","useDateCardDetailsItems","datetimeId","useEntityCardDetailsItems","Details","onUpdate","description","detailsItems","additionalProps","hooks","applyFilters","EMPTY_OBJECT","venues","useVenues","selectedVenue","findEntityByGuid","venue","onChangeValue","text","title","align","inline","noBorderColor","venueName","DateCard","useDatetimeItem","bgClassName","datetimeStatusBgColorClassName","actionsMenu","layout","EntityActionsMenuLayout","Vertical","sidebar","sidebarClass","CardView","filteredDateIds","useFilteredDateIds","EntityCard","entityIds"],"mappings":"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","file":"static/js/dates-card-view.0964f523.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nexport const DateRegistrationsLink: React.FC<Props> = ({ datetime }) => {\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId });\n\n\tconst tooltip = __('view ALL registrations for this date.');\n\n\treturn <RegistrationsLink href={regListUrl} tooltip={tooltip} />;\n};\n","import { useCallback } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useDatetimeMutator, useUpdateTicketQtyByCapacity } from '@eventespresso/edtr-services';\nimport type { DateItemProps } from '../types';\n\nconst DateCapacity: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst { createBulkQtyUpdateInput, doQtyBulkUpdate } = useUpdateTicketQtyByCapacity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (cap) => {\n\t\t\tconst capacity = parseInfinity(cap);\n\t\t\tif (capacity !== datetime.capacity) {\n\t\t\t\tawait updateEntity({ capacity });\n\n\t\t\t\t// pass the new capacity to create input\n\t\t\t\tconst input = createBulkQtyUpdateInput({ ...datetime, capacity });\n\n\t\t\t\tawait doQtyBulkUpdate(input);\n\t\t\t}\n\t\t},\n\t\t[datetime, updateEntity, createBulkQtyUpdateInput, doQtyBulkUpdate]\n\t);\n\n\t/* translators:  click to edit capacity<linebreak>(registration limit)…*/\n\tconst tooltip = sprintf(__('click to edit capacity%s(registration limit)…'), '\\n');\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tdata-testid='ee-datetime-inline-cap'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={`${datetime.capacity}`}\n\t\t/>\n\t);\n};\n\nexport default DateCapacity;\n","import type { Datetime } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '../../../hooks/entityActionsMenu';\n\nconst useDatesActionMenuItems = (datetime: Datetime): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('datetime', datetime);\n};\n\nexport default useDatesActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport { Datetime } from '@eventespresso/edtr-services';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\n\nimport useDatesActionMenuItems from '../../hooks/useDatesActionMenuItems';\n\nconst DateActionsMenu: React.FC<ActionsMenuComponentProps<Datetime>> = ({ entity, ...props }) => {\n\tconst menuItems = useDatesActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default DateActionsMenu;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\nimport type { DateItemProps } from '../types';\n\ninterface EditableNameProps extends DateItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: datetime,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== datetime.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[datetime.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={datetime.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/ee-components';\nimport { getDatetimeStatusTextLabel } from '@eventespresso/helpers';\nimport { useDatesListFilterState } from '@eventespresso/edtr-services';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\n\nimport type { DateItemProps } from '../types';\n\nconst DateCardSidebar: React.FC<DateItemProps> = ({ entity: date }) => {\n\tconst { displayStartOrEndDate } = useDatesListFilterState();\n\tconst { updateEntity } = useDatetimeMutator(date.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onChange = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getDatetimeStatusTextLabel(date);\n\n\tconst labels = useMemo(() => {\n\t\treturn {\n\t\t\theaderFuture: displayStartOrEndDate === 'start' ? __('starts') : __('ends'),\n\t\t\theaderPast: displayStartOrEndDate === 'start' ? __('started') : date.isExpired ? __('ended') : __('ends'),\n\t\t};\n\t}, [date.isExpired, displayStartOrEndDate]);\n\n\treturn date ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tlabels={labels}\n\t\t\t\tendDate={date.endDate}\n\t\t\t\tstartDate={date.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={date.endDate}\n\t\t\t\theader={__('Edit Event Date')}\n\t\t\t\tonChange={onChange}\n\t\t\t\tpopoverPlacement='right-end'\n\t\t\t\tstartDate={date.startDate}\n\t\t\t\ttooltip={__('edit start and end dates')}\n\t\t\t/>\n\t\t\t<div className='ee-entity-status-label'>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default DateCardSidebar;\n","import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink, QueryURLRegStatus } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nexport const DateSoldLink: React.FC<Props> = ({ datetime }) => {\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId, _reg_status: QueryURLRegStatus.APPROVED });\n\n\tconst tooltip = __('view approved registrations for this date.');\n\n\treturn (\n\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip}>\n\t\t\t{datetime.sold}\n\t\t</RegistrationsLink>\n\t);\n};\n","import { useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityDetailsPanel } from '@eventespresso/ui-components';\nimport { DateRegistrationsLink } from '../DateRegistrationsLink';\nimport { DateSoldLink } from '../DateSoldLink';\nimport DateCapacity from './DateCapacity';\nimport type { DateItemProps } from '../types';\n\nconst DateDetailsPanel: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: <DateSoldLink datetime={datetime} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-capacity',\n\t\t\t\tlabel: __('capacity'),\n\t\t\t\tvalue: <DateCapacity entity={datetime} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-registrations',\n\t\t\t\tclassName: 'ee-has-tooltip',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <DateRegistrationsLink datetime={datetime} />,\n\t\t\t},\n\t\t],\n\t\t[datetime]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-date-details-sold-rsrvd-cap-div' />;\n};\n\nexport default DateDetailsPanel;\n","import type { EntityId } from '@eventespresso/data';\nimport { useEntityCardDetailsItems } from '@edtrHooks/index';\n\nconst useDateCardDetailsItems = (datetimeId: EntityId): Array<React.ReactNode> => {\n\treturn useEntityCardDetailsItems('datetime', datetimeId);\n};\n\nexport default useDateCardDetailsItems;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { EMPTY_OBJECT } from '@eventespresso/constants';\nimport { SimpleTextEditorModal } from '@eventespresso/ee-components';\nimport { useDatetimeMutator, useVenues, hooks } from '@eventespresso/edtr-services';\nimport { VenueSelector } from '@eventespresso/ui-components';\nimport { findEntityByGuid } from '@eventespresso/predicates';\n\nimport DateDetailsPanel from './DateDetailsPanel';\nimport { EditableName } from '../editable';\nimport useDateCardDetailsItems from '../../hooks/useDateCardDetailsItems';\nimport type { DateItemProps } from '../types';\n\nconst Details: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\tconst detailsItems = useDateCardDetailsItems(datetime.id);\n\n\tconst additionalProps = useMemo(() => {\n\t\treturn hooks.applyFilters('eventEditor.datetimes.inlineDescriptionProps', EMPTY_OBJECT, datetime);\n\t}, [datetime]);\n\n\tconst venues = useVenues();\n\tconst selectedVenue = useMemo(() => findEntityByGuid(venues)(datetime?.venue), [datetime?.venue, venues]);\n\n\tconst onChangeValue = useCallback((venue) => updateEntity({ venue }), [updateEntity]);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className='entity-card-details__name' entity={datetime} />\n\n\t\t\t<SimpleTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={datetime.description || __('add description…')}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('click to edit description…')}\n\t\t\t\t{...additionalProps}\n\t\t\t/>\n\n\t\t\t<VenueSelector\n\t\t\t\talign='center'\n\t\t\t\tclassName='ee-event-venue'\n\t\t\t\tinline\n\t\t\t\tnoBorderColor\n\t\t\t\tonChangeValue={onChangeValue}\n\t\t\t\tvalue={datetime?.venue}\n\t\t\t\tvenueName={selectedVenue?.name}\n\t\t\t\tvenues={venues}\n\t\t\t/>\n\n\t\t\t{detailsItems}\n\n\t\t\t<DateDetailsPanel entity={datetime} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import { EntityActionsMenuLayout } from '@eventespresso/ui-components';\nimport { datetimeStatusBgColorClassName } from '@eventespresso/helpers';\nimport { EntityCard } from '@eventespresso/ui-components';\nimport { useDatetimeItem } from '@eventespresso/edtr-services';\n\nimport DateActionsMenu from '../actionsMenu/DateActionsMenu';\nimport DateCardSidebar from './DateCardSidebar';\nimport Details from './Details';\nimport type { DateItemProps } from '../types';\n\nconst DateCard: React.FC<DateItemProps> = ({ id }) => {\n\tconst date = useDatetimeItem({ id });\n\tconst bgClassName = datetimeStatusBgColorClassName(date);\n\n\treturn date ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<DateActionsMenu entity={date} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tdetails={<Details entity={date} />}\n\t\t\tentity={date}\n\t\t\tsidebar={<DateCardSidebar entity={date} />}\n\t\t\tsidebarClass={bgClassName}\n\t\t/>\n\t) : null;\n};\n\nexport default DateCard;\n","import { EntityCardList } from '@eventespresso/ui-components';\nimport { useFilteredDateIds } from '@eventespresso/edtr-services';\n\nimport DateCard from './DateCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredDateIds = useFilteredDateIds();\n\n\treturn <EntityCardList EntityCard={DateCard} entityIds={filteredDateIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}