{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/datetimes/datesList/DateRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCapacity.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDatesActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/actionsMenu/DateActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/Checkbox.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/useBodyRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/useHeaderRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/formValidation.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/useBulkEditFormConfig.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/useSubmitForm.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/EditDetails.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/delete/useOnDelete.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/delete/Delete.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/actions/Actions.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/TableView.tsx"],"names":["DateRegistrationsLink","_ref","_step","datetime","tickets","useRelatedTickets","getRelatedTickets","entity","entityId","id","count","_iterator","_createForOfIteratorHelper","s","n","done","value","registrationCount","err","e","f","regListUrl","useRegistrationsLink","datetime_id","dbId","countTitle","__","tooltip","_jsx","ItemCount","emphasizeZero","title","children","RegistrationsLink","href","DateCapacity","updateEntity","useDatetimeMutator","_useUpdateTicketQtyBy","useUpdateTicketQtyByCapacity","createBulkQtyUpdateInput","doQtyBulkUpdate","onChange","useCallback","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cap","capacity","input","wrap","_context","prev","next","parseInfinity","_objectSpread","stop","_x","apply","arguments","sprintf","InlineEditInfinity","concat","useDatesActionMenuItems","useEntityActionsMenuItems","DateActionsMenu","props","_objectWithoutProperties","menuItems","EntityActionsMenu","EditableName","className","testid","_ref$view","view","lineCount","onChangeName","name","InlineEditText","tag","withCurrentUserCan","USE_ADVANCED_EDITOR","_useVisibleDatetimeId","useVisibleDatetimeIds","visibleDatetimeIds","_slicedToArray","ActionCheckbox","visibleEntityIds","addZebraStripes","addZebraStripesOnMobile","useBodyRowGenerator","datetimes","useDatetimes","getDatetime","findEntityByGuid","getLazyDatetime","useLazyDatetime","canUseBulkEdit","useFeature","format","useTimeZoneTime","formatForSite","filterState","displayStartOrEndDate","bgClassName","getDatetimeBackgroundColorClassName","statusClassName","datetimeStatus","cellsData","classNames","key","showValueOnMobile","textAlign","size","Checkbox","parseISO","startDate","ENTITY_LIST_DATE_TIME_FORMAT","endDate","sold","filter","Boolean","filterCells","R","filterCellByStartOrEndDate","cells","bodyRowClassName","rowClassName","type","useHeaderRowGenerator","stripeCell","useMemo","idCell","nameCell","startCell","_jsxs","_Fragment","endCell","capacityCell","soldCell","registrationsCell","actionsCell","primary","validate","values","yupToFinalFormErrors","validationSchema","abrupt","sent","yup","min","unitOptions","intervalsToOptions","DATE_INTERVALS","useBulkEditFormConfig","config","onSubmit","onSubmitFrom","form","_len","length","restParams","Array","_key","adjacentFormItemProps","useMemoStringify","layout","sections","icon","ProfileOutlined","fields","label","fieldType","CalendarOutlined","formControlProps","subFields","options","ControlOutlined","parseAsInfinity","useSubmitForm","onClose","_useBulkEdit","useBulkEdit","getSelected","unSelectAll","allDates","updateEntities","useBulkEditDatetimes","formData","uniqInput","formToBulkUpdateInput","isInfinite","reduce","newInput","_toConsumableArray","EditDetails","isOpen","formConfig","BulkEditDetails","warning","useOnDelete","areTrashedDates","bulkDelete","useBulkDeleteDatetimes","Delete","onDelete","_useConfirmationDialo","useConfirmationDialog","message","onConfirm","onCancel","confirmationDialog","onOpen","useEffect","actions","_useState","useState","_useState2","action","setAction","bulkEdit","_useDisclosure","useDisclosure","useDatesListFilterState","status","DatetimeStatus","trashedOnly","hooks","applyFilters","onApply","newAction","includes","doAction","BulkActions","defaultAction","withBulkEdit","filteredDateIds","useFilteredDateIds","bodyRowGenerator","headerRowGenerator","BulkEditActions","EntityTable","domain","entityIds","listId","datesList","tableCaption","tableId"],"mappings":"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","file":"static/js/dates-table-view.10c79866.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink, useRelatedTickets } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nexport const DateRegistrationsLink: React.FC<Props> = ({ datetime }) => {\n\tconst getRelatedTickets = useRelatedTickets();\n\n\tconst tickets = getRelatedTickets({\n\t\tentity: 'datetimes',\n\t\tentityId: datetime.id,\n\t});\n\n\tlet count = 0;\n\tfor (const ticket of tickets) {\n\t\tcount += ticket.registrationCount;\n\t}\n\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this date.');\n\n\treturn (\n\t\t<ItemCount count={count} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useDatetimeMutator, useUpdateTicketQtyByCapacity } from '@eventespresso/edtr-services';\nimport type { DateItemProps } from '../types';\n\nconst DateCapacity: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst { createBulkQtyUpdateInput, doQtyBulkUpdate } = useUpdateTicketQtyByCapacity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (cap) => {\n\t\t\tconst capacity = parseInfinity(cap);\n\t\t\tif (capacity !== datetime.capacity) {\n\t\t\t\tawait updateEntity({ capacity });\n\n\t\t\t\t// pass the new capacity to create input\n\t\t\t\tconst input = createBulkQtyUpdateInput({ ...datetime, capacity });\n\n\t\t\t\tawait doQtyBulkUpdate(input);\n\t\t\t}\n\t\t},\n\t\t[datetime, updateEntity, createBulkQtyUpdateInput, doQtyBulkUpdate]\n\t);\n\n\t/* translators:  click to edit capacity<linebreak>(registration limit)…*/\n\tconst tooltip = sprintf(__('click to edit capacity%s(registration limit)…'), '\\n');\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tdata-testid='ee-datetime-inline-cap'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={`${datetime.capacity}`}\n\t\t/>\n\t);\n};\n\nexport default DateCapacity;\n","import type { Datetime } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '../../../hooks/entityActionsMenu';\n\nconst useDatesActionMenuItems = (datetime: Datetime): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('datetime', datetime);\n};\n\nexport default useDatesActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport { Datetime } from '@eventespresso/edtr-services';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\n\nimport useDatesActionMenuItems from '../../hooks/useDatesActionMenuItems';\n\nconst DateActionsMenu: React.FC<ActionsMenuComponentProps<Datetime>> = ({ entity, ...props }) => {\n\tconst menuItems = useDatesActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default DateActionsMenu;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\nimport type { DateItemProps } from '../types';\n\ninterface EditableNameProps extends DateItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: datetime,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== datetime.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[datetime.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={datetime.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { ActionCheckbox } from '@eventespresso/ee-components';\nimport { USE_ADVANCED_EDITOR } from '@eventespresso/constants';\nimport { useVisibleDatetimeIds } from '@eventespresso/edtr-services';\nimport { withCurrentUserCan } from '@eventespresso/services';\nimport type { ActionCheckboxProps } from '@eventespresso/ee-components';\n\nconst Checkbox: React.FC<ActionCheckboxProps> = (props) => {\n\tconst [visibleDatetimeIds] = useVisibleDatetimeIds();\n\n\treturn <ActionCheckbox {...props} visibleEntityIds={visibleDatetimeIds} />;\n};\n\nexport default withCurrentUserCan(USE_ADVANCED_EDITOR)(Checkbox);\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { parseISO } from 'date-fns';\nimport * as R from 'ramda';\n\nimport { addZebraStripesOnMobile, CellData } from '@eventespresso/ui-components';\nimport { filterCellByStartOrEndDate, useDatetimes, useLazyDatetime } from '@eventespresso/edtr-services';\nimport { ENTITY_LIST_DATE_TIME_FORMAT } from '@eventespresso/constants';\nimport { useFeature, useTimeZoneTime } from '@eventespresso/services';\nimport { getDatetimeBackgroundColorClassName, datetimeStatus } from '@eventespresso/helpers';\nimport { findEntityByGuid } from '@eventespresso/predicates';\nimport type { EntityId } from '@eventespresso/data';\nimport type { DatetimesFilterStateManager } from '@eventespresso/edtr-services';\nimport type { BodyRowGeneratorFn } from '@eventespresso/ee-components';\n\nimport { DateRegistrationsLink } from '../DateRegistrationsLink';\nimport DateActionsMenu from '../../datesList/actionsMenu/DateActionsMenu';\nimport DateCapacity from '../cardView/DateCapacity';\nimport { EditableName } from '../editable';\nimport Checkbox from './Checkbox';\n\ntype DatesTableBodyRowGen = BodyRowGeneratorFn<DatetimesFilterStateManager>;\n\nconst exclude = ['row', 'stripe', 'name', 'actions'];\nconst addZebraStripes = addZebraStripesOnMobile(exclude);\n\nconst useBodyRowGenerator = (): DatesTableBodyRowGen => {\n\tconst datetimes = useDatetimes();\n\tconst getDatetime = useCallback((id: EntityId) => findEntityByGuid(datetimes)(id), [datetimes]);\n\tconst getLazyDatetime = useLazyDatetime();\n\tconst canUseBulkEdit = useFeature('ee_event_editor_bulk_edit');\n\tconst { formatForSite: format } = useTimeZoneTime();\n\n\treturn useCallback<DatesTableBodyRowGen>(\n\t\t({ entityId, filterState }) => {\n\t\t\tconst datetime = getDatetime(entityId) || getLazyDatetime(entityId);\n\n\t\t\tconst { displayStartOrEndDate } = filterState;\n\n\t\t\tconst bgClassName = getDatetimeBackgroundColorClassName(datetime);\n\t\t\tconst id = datetime.dbId || 0;\n\t\t\tconst statusClassName = datetimeStatus(datetime);\n\n\t\t\tconst stripeCell: CellData = {\n\t\t\t\tclassName: classNames('ee-entity-list-status-stripe', bgClassName),\n\t\t\t\tkey: 'stripe',\n\t\t\t\tshowValueOnMobile: true,\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: datetime.name,\n\t\t\t};\n\n\t\t\tconst bulkActionCheckboxCell: CellData = canUseBulkEdit && {\n\t\t\t\tkey: 'cell',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <Checkbox dbId={datetime.dbId} id={datetime.id} />,\n\t\t\t};\n\n\t\t\tconst idCell: CellData = {\n\t\t\t\tkey: 'id',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: id,\n\t\t\t};\n\n\t\t\tconst nameCell: CellData = {\n\t\t\t\tclassName: 'ee-col-name ee-rspnsv-table-hide-on-mobile',\n\t\t\t\tkey: 'name',\n\t\t\t\tsize: 'huge',\n\t\t\t\tvalue: (\n\t\t\t\t\t<EditableName\n\t\t\t\t\t\tclassName='ee-entity-name ee-entity-list-text ee-focus-priority-5'\n\t\t\t\t\t\tdata-testid={`ee-entity-list-view-row-editable-${datetime.dbId}`}\n\t\t\t\t\t\tentity={datetime}\n\t\t\t\t\t\tview='table'\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst startCell: CellData = {\n\t\t\t\tkey: 'start',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(datetime.startDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst endCell: CellData = {\n\t\t\t\tkey: 'end',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(datetime.endDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst capacityCell: CellData = {\n\t\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\t\tkey: 'capacity',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <DateCapacity entity={datetime} />,\n\t\t\t};\n\n\t\t\tconst soldCell: CellData = {\n\t\t\t\tkey: 'sold',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: datetime.sold || 0,\n\t\t\t};\n\n\t\t\tconst registrationsCell: CellData = {\n\t\t\t\tkey: 'registrations',\n\t\t\t\tsize: 'smaller',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <DateRegistrationsLink datetime={datetime} />,\n\t\t\t};\n\n\t\t\tconst actionsCell: CellData = {\n\t\t\t\tkey: 'actions',\n\t\t\t\tsize: 'big',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <DateActionsMenu entity={datetime} />,\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tbulkActionCheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tcapacityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t].filter(\n\t\t\t\t// removes falsy values\n\t\t\t\tBoolean\n\t\t\t);\n\n\t\t\tconst filterCells = R.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\tconst cells = R.pipe(filterCells, addZebraStripes)(cellsData);\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: { bodyRowClassName: statusClassName },\n\t\t\t\t'data-testid': `ee-datetime-list-view-row-${datetime.dbId}`,\n\t\t\t\tid: `ee-editor-datetime-list-view-row-${datetime.id}`,\n\t\t\t\tkey: `row-${datetime.id}`,\n\t\t\t\trowClassName: 'ee-entity-list-item',\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[canUseBulkEdit, format, getDatetime, getLazyDatetime]\n\t);\n};\n\nexport default useBodyRowGenerator;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { filterCellByStartOrEndDate } from '@eventespresso/edtr-services';\n\nimport type { CellData } from '@eventespresso/ui-components';\nimport type { HeaderRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { DatetimesFilterStateManager } from '@eventespresso/edtr-services';\nimport { useFeature } from '@eventespresso/services';\n\nimport Checkbox from './Checkbox';\n\ntype DatesTableHeaderRowGen = HeaderRowGeneratorFn<DatetimesFilterStateManager>;\n\nconst useHeaderRowGenerator = (): DatesTableHeaderRowGen => {\n\tconst canUseBulkEdit = useFeature('ee_event_editor_bulk_edit');\n\tconst stripeCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-entity-list-status-stripe',\n\t\t\tkey: 'stripe',\n\t\t\tsize: 'nano',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: '',\n\t\t}),\n\t\t[]\n\t);\n\n\tconst idCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'id',\n\t\t\tsize: 'micro',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('ID'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst nameCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'name',\n\t\t\tsize: 'huge',\n\t\t\tvalue: __('Name'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst startCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'start',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Start Date')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Start')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst endCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'end',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('End Date')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('End')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst capacityCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\tkey: 'capacity',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Capacity')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Cap')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst soldCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'sold',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Sold'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst registrationsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'registrations',\n\t\t\tsize: 'smaller',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Reg list')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Regs')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst actionsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'actions',\n\t\t\tsize: 'big',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Actions')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Actions')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\treturn useCallback<DatesTableHeaderRowGen>(\n\t\t(filterState) => {\n\t\t\tconst { displayStartOrEndDate } = filterState;\n\n\t\t\tconst checkboxCell: CellData = canUseBulkEdit && {\n\t\t\t\tkey: 'checkbox',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: (\n\t\t\t\t\t<div className={'ee-rspnsv-table-hide-on-mobile'}>\n\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tcheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tcapacityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t];\n\n\t\t\tconst cells = cellsData\n\t\t\t\t.filter(\n\t\t\t\t\t// removes falsy values\n\t\t\t\t\tBoolean\n\t\t\t\t)\n\t\t\t\t.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: 'ee-editor-date-list-items-header-row',\n\t\t\t\tkey: 'dates-list-header',\n\t\t\t\tprimary: true,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[\n\t\t\tactionsCell,\n\t\t\tcanUseBulkEdit,\n\t\t\tcapacityCell,\n\t\t\tendCell,\n\t\t\tidCell,\n\t\t\tnameCell,\n\t\t\tregistrationsCell,\n\t\t\tsoldCell,\n\t\t\tstartCell,\n\t\t\tstripeCell,\n\t\t]\n\t);\n};\n\nexport default useHeaderRowGenerator;\n","import { __ } from '@eventespresso/i18n';\nimport * as yup from 'yup';\n\nimport { yupToFinalFormErrors } from '@eventespresso/form';\nimport { BulkEditFormShape } from './types';\n\nexport const validate = async (values: BulkEditFormShape): Promise<any> => {\n\treturn await yupToFinalFormErrors(validationSchema, values);\n};\n\nconst validationSchema = yup.object({\n\tname: yup.string().min(3, () => __('Name must be at least three characters')),\n});\n","import { __ } from '@eventespresso/i18n';\nimport * as R from 'ramda';\nimport { useCallback, useMemo } from 'react';\n\nimport { DATE_INTERVALS, Intervals, intervalsToOptions } from '@eventespresso/dates';\nimport type { EspressoFormProps } from '@eventespresso/form';\nimport { CalendarOutlined, ControlOutlined, ProfileOutlined } from '@eventespresso/icons';\n\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { validate } from './formValidation';\nimport type { BulkEditFormShape } from './types';\n\ntype DateFormConfig = EspressoFormProps<BulkEditFormShape>;\n\nconst unitOptions = intervalsToOptions(\n\tR.pick<Intervals, keyof Intervals>(['months', 'weeks', 'days', 'hours', 'minutes'], DATE_INTERVALS),\n\ttrue\n);\n\nconst useBulkEditFormConfig = (config?: EspressoFormProps<BulkEditFormShape>): DateFormConfig => {\n\tconst { onSubmit } = config;\n\n\tconst onSubmitFrom: DateFormConfig['onSubmit'] = useCallback(\n\t\t(values, form, ...restParams) => {\n\t\t\treturn onSubmit(values, form, ...restParams);\n\t\t},\n\t\t[onSubmit]\n\t);\n\n\tconst adjacentFormItemProps = useMemoStringify({\n\t\tclassName: 'ee-form-item-pair',\n\t});\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\t...config,\n\t\t\tonSubmit: onSubmitFrom,\n\t\t\tvalidate,\n\t\t\tlayout: 'horizontal',\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tname: 'basics',\n\t\t\t\t\ticon: ProfileOutlined,\n\t\t\t\t\ttitle: __('Basics'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tlabel: __('Name'),\n\t\t\t\t\t\t\tfieldType: 'text',\n\t\t\t\t\t\t\tmin: 3,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'description',\n\t\t\t\t\t\t\tlabel: __('Description'),\n\t\t\t\t\t\t\tfieldType: 'simple-text-editor',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'dates',\n\t\t\t\t\ticon: CalendarOutlined,\n\t\t\t\t\ttitle: __('Dates'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'shiftDates',\n\t\t\t\t\t\t\tlabel: __('Shift dates'),\n\t\t\t\t\t\t\tfieldType: 'group',\n\t\t\t\t\t\t\tformControlProps: {\n\t\t\t\t\t\t\t\tclassName: 'shift-dates',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsubFields: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'unit',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: unitOptions,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('earlier'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'earlier',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('later'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'later',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'details',\n\t\t\t\t\ticon: ControlOutlined,\n\t\t\t\t\ttitle: __('Details'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'capacity',\n\t\t\t\t\t\t\tlabel: __('Capacity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\t[adjacentFormItemProps, config, onSubmitFrom]\n\t);\n};\n\nexport default useBulkEditFormConfig;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { isInfinite } from '@eventespresso/utils';\nimport {\n\tuseDatetimes,\n\tuseBulkEditDatetimes,\n\tformToBulkUpdateInput,\n\tuseUpdateTicketQtyByCapacity,\n} from '@eventespresso/edtr-services';\n\nimport type { BulkEditFormShape } from './types';\n\ntype Callback = (values: BulkEditFormShape) => Promise<void>;\n\nconst useSubmitForm = (onClose: VoidFunction): Callback => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst allDates = useDatetimes();\n\tconst { updateEntities } = useBulkEditDatetimes();\n\tconst { createBulkQtyUpdateInput, doQtyBulkUpdate } = useUpdateTicketQtyByCapacity();\n\n\treturn useCallback<Callback>(\n\t\tasync (formData) => {\n\t\t\t// pull the shutter down\n\t\t\tonClose();\n\t\t\t// prepare mutation input from data\n\t\t\tconst input = formToBulkUpdateInput(formData, allDates, getSelected());\n\t\t\t// back to basics\n\t\t\tunSelectAll();\n\t\t\t// do the thing\n\t\t\tawait updateEntities(input);\n\n\t\t\t// If capacity is present and is not infinite\n\t\t\tif (!isInfinite(formData.capacity)) {\n\t\t\t\t// generate a combined ticket quantity input from all the selected dates\n\t\t\t\tconst uniqInput = getSelected().reduce((input, id) => {\n\t\t\t\t\tconst newInput = createBulkQtyUpdateInput({ id, capacity: formData.capacity });\n\t\t\t\t\treturn [...input, ...newInput];\n\t\t\t\t}, []);\n\n\t\t\t\tawait doQtyBulkUpdate(uniqInput);\n\t\t\t}\n\t\t},\n\t\t[allDates, createBulkQtyUpdateInput, doQtyBulkUpdate, getSelected, onClose, unSelectAll, updateEntities]\n\t);\n};\n\nexport default useSubmitForm;\n","import { __ } from '@eventespresso/i18n';\n\nimport { BulkEditDetails } from '@eventespresso/ee-components';\nimport useBulkEditFormConfig from './useBulkEditFormConfig';\nimport useSubmitForm from './useSubmitForm';\n\ntype EditDetailsProps = {\n\tisOpen: boolean;\n\tonClose: VoidFunction;\n};\n\nconst EditDetails: React.FC<EditDetailsProps> = ({ onClose, isOpen }) => {\n\tconst onSubmit = useSubmitForm(onClose);\n\tconst formConfig = useBulkEditFormConfig({ onSubmit });\n\n\treturn (\n\t\t<BulkEditDetails\n\t\t\tformConfig={formConfig}\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={__('Bulk edit date details')}\n\t\t\twarning={__('any changes will be applied to ALL of the selected dates.')}\n\t\t/>\n\t);\n};\n\nexport default EditDetails;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useBulkDeleteDatetimes } from '@eventespresso/edtr-services';\n\nimport type { OnDeleteProps } from './types';\n\ntype OnDelete = (props: OnDeleteProps) => VoidFunction;\n\nconst useOnDelete: OnDelete = ({ areTrashedDates, onClose }) => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst bulkDelete = useBulkDeleteDatetimes();\n\treturn useCallback<VoidFunction>(() => {\n\t\t// pull the shutter down\n\t\tonClose();\n\t\t// back to basics\n\t\tunSelectAll();\n\n\t\t// goodbye folks :wave:\n\t\tbulkDelete(getSelected(), areTrashedDates);\n\t}, [areTrashedDates, bulkDelete, getSelected, onClose, unSelectAll]);\n};\n\nexport default useOnDelete;\n","import { useEffect } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { useConfirmationDialog } from '@eventespresso/ui-components';\nimport useOnDelete from './useOnDelete';\nimport { OnDeleteProps } from './types';\n\nconst Delete: React.FC<OnDeleteProps> = ({ areTrashedDates, onClose }) => {\n\tconst onDelete = useOnDelete({ areTrashedDates, onClose });\n\n\tconst { confirmationDialog, onOpen } = useConfirmationDialog({\n\t\tmessage: areTrashedDates\n\t\t\t? __('Are you sure you want to permanently delete these datetimes? This action can NOT be undone!')\n\t\t\t: __('Are you sure you want to trash these datetimes?'),\n\t\ttitle: areTrashedDates ? __('Delete datetimes permanently') : __('Trash datetimes'),\n\t\tonConfirm: onDelete,\n\t\tonCancel: onClose,\n\t});\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tuseEffect(() => onOpen(), []);\n\n\treturn <>{confirmationDialog}</>;\n};\n\nexport default Delete;\n","import { useState, useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { BulkActions } from '@eventespresso/ee-components';\nimport { DatetimeStatus } from '@eventespresso/predicates';\nimport { USE_ADVANCED_EDITOR } from '@eventespresso/constants';\nimport { useBulkEdit, useFeature } from '@eventespresso/services';\nimport { useDatesListFilterState, hooks } from '@eventespresso/edtr-services';\nimport { useDisclosure, useMemoStringify } from '@eventespresso/hooks';\nimport { withCurrentUserCan } from '@eventespresso/services';\nimport type { BulkActionsProps } from '@eventespresso/ui-components';\n\nimport Checkbox from '../../tableView/Checkbox';\nimport { EditDetails } from '../details';\nimport { Delete } from '../delete';\n\ntype Action = 'edit-details' | 'delete' | '';\n\nconst actions: Array<Action> = ['edit-details', 'delete', ''];\n\nconst Actions: React.FC = () => {\n\tconst [action, setAction] = useState<Action>('');\n\tconst bulkEdit = useBulkEdit();\n\tconst canUseBulkEdit = useFeature('ee_event_editor_bulk_edit');\n\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\n\tconst { status } = useDatesListFilterState();\n\n\tconst areTrashedDates = status === DatetimeStatus.trashedOnly;\n\n\tconst options = useMemoStringify(\n\t\thooks.applyFilters('eventEditor.datetimes.bulkEdit.actions', [\n\t\t\t{\n\t\t\t\tvalue: '',\n\t\t\t\tlabel: __('bulk actions'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'edit-details',\n\t\t\t\tlabel: __('edit datetime details'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'delete',\n\t\t\t\tlabel: areTrashedDates ? __('delete datetimes') : __('trash datetimes'),\n\t\t\t},\n\t\t])\n\t);\n\n\tconst onApply = useCallback<BulkActionsProps<Action>['onApply']>(\n\t\t(newAction) => {\n\t\t\tsetAction(newAction);\n\t\t\t// if it's a core action\n\t\t\tif (actions.includes(newAction)) {\n\t\t\t\tonOpen();\n\t\t\t}\n\t\t\thooks.doAction('eventEditor.datetimes.bulkEdit.apply', newAction, bulkEdit);\n\t\t},\n\t\t[bulkEdit, onOpen]\n\t);\n\n\treturn (\n\t\tcanUseBulkEdit && (\n\t\t\t<>\n\t\t\t\t<BulkActions\n\t\t\t\t\tCheckbox={Checkbox}\n\t\t\t\t\tdefaultAction=''\n\t\t\t\t\tid={'ee-bulk-edit-dates-actions'}\n\t\t\t\t\tonApply={onApply}\n\t\t\t\t\toptions={options}\n\t\t\t\t/>\n\t\t\t\t<>\n\t\t\t\t\t{action === 'edit-details' && <EditDetails isOpen={isOpen} onClose={onClose} />}\n\t\t\t\t\t{action === 'delete' && <Delete areTrashedDates={areTrashedDates} onClose={onClose} />}\n\t\t\t\t</>\n\t\t\t</>\n\t\t)\n\t);\n};\n\nexport default withCurrentUserCan(USE_ADVANCED_EDITOR)(Actions);\n","import { __ } from '@eventespresso/i18n';\n\nimport { EntityTable } from '@eventespresso/ee-components';\nimport { datesList, domain, useDatesListFilterState, useFilteredDateIds } from '@eventespresso/edtr-services';\nimport { withBulkEdit } from '@eventespresso/services';\n\nimport useBodyRowGenerator from './useBodyRowGenerator';\nimport useHeaderRowGenerator from './useHeaderRowGenerator';\nimport { Actions as BulkEditActions } from '../bulkEdit';\n\nimport './styles.scss';\n\n/**\n * Displays event date details in a standard list table like view\n */\nconst TableView: React.FC = () => {\n\tconst filterState = useDatesListFilterState();\n\tconst filteredDateIds = useFilteredDateIds();\n\n\tconst bodyRowGenerator = useBodyRowGenerator();\n\tconst headerRowGenerator = useHeaderRowGenerator();\n\n\treturn (\n\t\t<>\n\t\t\t<BulkEditActions />\n\t\t\t<EntityTable\n\t\t\t\tbodyRowGenerator={bodyRowGenerator}\n\t\t\t\tdomain={domain}\n\t\t\t\tentityIds={filteredDateIds}\n\t\t\t\tfilterState={filterState}\n\t\t\t\theaderRowGenerator={headerRowGenerator}\n\t\t\t\tlistId={datesList}\n\t\t\t\ttableCaption={__('Event Dates')}\n\t\t\t\ttableId='date-entities-table-view'\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default withBulkEdit(TableView);\n"],"sourceRoot":""}