{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/TicketRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/TicketSoldLink.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketDetailsPanel.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/Details.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCardSidebar.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCard.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/CardView.tsx"],"names":["TicketRegistrationsLink","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","count","registrationCount","emphasizeZero","title","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","toaster","useSystemNotifications","getCappedQuantity","useCappedQuantity","onChange","useCallback","qty","a","parsedQuantity","parseInfinity","quantity","ticketId","isQtyAdjustedByCapacity","hasQtyChanged","info","message","value","cacheId","EditableName","className","testid","view","lineCount","onChangeName","name","tag","useRecalculateBasePrice","getTicket","useLazyTicket","getTicketPrices","useTicketPrices","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","tpcData","updatedTicket","price","existingBasePrice","getBasePrice","prices","priceModifiers","getPriceModifiers","newBasePriceAmount","calculateBasePrice","newBasePrice","isModified","order","isNew","newPrices","amount","relatedPriceIds","reverseCalculate","EditablePrice","useMoneyDisplay","afterAmount","beforeAmount","formatAmount","recalculateBasePrice","onChangePrice","Math","abs","useLockedTicketAction","alertContainer","showAlert","wrapperProps","useMemoStringify","isTicketLocked","isLocked","as","onClick","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","TicketSoldLink","_reg_status","QueryURLRegStatus","APPROVED","sold","TicketDetailsPanel","details","useMemo","label","Details","onUpdate","description","additionalProps","hooks","applyFilters","EMPTY_OBJECT","text","TicketCardSidebar","displayStartOrEndDate","useTicketsListFilterState","siteTimeToUtc","useTimeZoneTime","start","end","startDate","toISOString","endDate","statusText","getTicketStatusTextLabel","labels","headerFuture","headerPast","isExpired","displayDate","header","popoverPlacement","TicketCard","useTicketItem","bgClassName","ticketStatusBgColorClassName","actionsMenu","layout","EntityActionsMenuLayout","Vertical","reverse","sidebar","sidebarClass","CardView","filteredTicketIds","useFilteredTicketIds","EntityCard","entityIds"],"mappings":"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","file":"static/js/tickets-card-view.b4bdb8af.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nexport const TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useTicketMutator, useCappedQuantity } from '@eventespresso/edtr-services';\nimport { useSystemNotifications } from '@eventespresso/toaster';\n\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst toaster = useSystemNotifications();\n\tconst getCappedQuantity = useCappedQuantity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (qty) => {\n\t\t\tconst parsedQuantity = parseInfinity(qty);\n\n\t\t\tconst quantity = getCappedQuantity({ quantity: parsedQuantity, ticketId: ticket.id });\n\n\t\t\tconst isQtyAdjustedByCapacity = quantity !== parsedQuantity;\n\t\t\tconst hasQtyChanged = quantity !== ticket.quantity;\n\n\t\t\tif (isQtyAdjustedByCapacity) {\n\t\t\t\ttoaster.info({\n\t\t\t\t\tmessage: __(\n\t\t\t\t\t\t'Ticket quantity has been adjusted because it cannot be more than the related event date capacity.'\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (hasQtyChanged || isQtyAdjustedByCapacity) {\n\t\t\t\tawait updateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[getCappedQuantity, ticket.id, ticket.quantity, toaster, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\t// Since ticket quantity is restricted by related date capacity\n\t\t\t// it's possible that the quantity has exactly the same value as the min date capacity\n\t\t\t// inline edit uses the internal state to update the value in UI\n\t\t\t// Since the quantity and capacity can be same, it can result in stale value being shown\n\t\t\t// passing a key ensures that UI updates with the correct value\n\t\t\tkey={ticket.cacheId}\n\t\t\tdata-testid='ee-ticket-inline-qty'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\ninterface EditableNameProps extends TicketItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: ticket,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={ticket.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice, getPriceModifiers } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useLazyTicket, useTicketMutator, useTicketPrices } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => Promise<void>;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\tconst getTicket = useLazyTicket();\n\tconst getTicketPrices = useTicketPrices();\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId, getTicket, getTicketPrices });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\tasync (ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst existingBasePrice = getBasePrice(tpcData.prices);\n\t\t\tconst priceModifiers = getPriceModifiers(tpcData.prices);\n\t\t\t// get the updated base price amount\n\t\t\tconst newBasePriceAmount = calculateBasePrice(tpcData.ticket?.price, tpcData.prices);\n\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tconst newBasePrice = existingBasePrice\n\t\t\t\t? // add the exiting base price\n\t\t\t\t  { ...existingBasePrice, isModified: true }\n\t\t\t\t: // add the default price\n\t\t\t\t  { ...defaultBasePrice, order: 1, isNew: true };\n\n\t\t\tconst newPrices = [\n\t\t\t\t// update the base price amount\n\t\t\t\t{ ...newBasePrice, amount: newBasePriceAmount },\n\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t// may be their taxation system works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t...priceModifiers,\n\t\t\t];\n\n\t\t\tconst relatedPriceIds = await mutatePrices(newPrices);\n\n\t\t\tawait updateTicket({\n\t\t\t\t// this is the ticket prices amount\n\t\t\t\tprice: ticketPrice,\n\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\treverseCalculate: true,\n\t\t\t\t// Make sure related prices are updated\n\t\t\t\tprices: relatedPriceIds,\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { Clickable } from '@eventespresso/adapters';\nimport { InlineEditCurrency } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { useMoneyDisplay } from '@eventespresso/services';\nimport { isLocked } from '@eventespresso/predicates';\nimport { useLockedTicketAction } from '@eventespresso/tpc';\n\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\nimport './style.scss';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst { afterAmount, beforeAmount, formatAmount } = useMoneyDisplay();\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = Math.abs(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\tconst { alertContainer, showAlert } = useLockedTicketAction(ticket, 'COPY/TRASH');\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isTicketLocked = isLocked(ticket);\n\n\tconst tooltip = __('edit ticket total…');\n\n\treturn isTicketLocked ? (\n\t\t<Clickable as='div' className='ee-ticket-editable-price' onClick={showAlert}>\n\t\t\t<CurrencyDisplay className={className} value={ticket.price} />\n\t\t\t{alertContainer}\n\t\t</Clickable>\n\t) : (\n\t\t<InlineEditCurrency\n\t\t\tafterAmount={afterAmount}\n\t\t\tamount={ticket.price}\n\t\t\tbeforeAmount={beforeAmount}\n\t\t\tformatAmount={formatAmount}\n\t\t\tid={ticket.id}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink, QueryURLRegStatus } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nexport const TicketSoldLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId, _reg_status: QueryURLRegStatus.APPROVED });\n\n\tconst tooltip = __('view approved registrations for this ticket.');\n\n\treturn (\n\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip}>\n\t\t\t{ticket.sold}\n\t\t</RegistrationsLink>\n\t);\n};\n","import { useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { TicketRegistrationsLink } from '../TicketRegistrationsLink';\nimport { TicketSoldLink } from '../TicketSoldLink';\nimport { EntityDetailsPanel } from '@eventespresso/ui-components';\nimport TicketQuantity from './TicketQuantity';\nimport type { TicketItemProps } from '../types';\n\nconst TicketDetailsPanel: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: <TicketSoldLink ticket={ticket} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-qty',\n\t\t\t\tlabel: __('quantity'),\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-registrations',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t},\n\t\t],\n\t\t[ticket]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-ticket-details-sold-rsrvd-qty-div' />;\n};\n\nexport default TicketDetailsPanel;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EMPTY_OBJECT } from '@eventespresso/constants';\nimport { SimpleTextEditorModal } from '@eventespresso/ee-components';\nimport { useTicketMutator, hooks } from '@eventespresso/edtr-services';\n\nimport { EditableName, EditablePrice } from '../editable';\nimport TicketDetailsPanel from './TicketDetailsPanel';\n\nimport type { TicketItemProps } from '../types';\n\nconst Details: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\tconst additionalProps = useMemo(() => {\n\t\treturn hooks.applyFilters('eventEditor.tickets.inlineDescriptionProps', EMPTY_OBJECT, ticket);\n\t}, [ticket]);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={ticket} />\n\n\t\t\t<SimpleTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={ticket.description || __('add description…')}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('click to edit description…')}\n\t\t\t\t{...additionalProps}\n\t\t\t/>\n\n\t\t\t<EditablePrice className='entity-card-details__price' entity={ticket} />\n\n\t\t\t<TicketDetailsPanel entity={ticket} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/ee-components';\nimport { getTicketStatusTextLabel } from '@eventespresso/helpers';\nimport { useTicketMutator, useTicketsListFilterState } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCardSidebar: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onChange = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getTicketStatusTextLabel(ticket);\n\n\tconst labels = useMemo(() => {\n\t\treturn {\n\t\t\theaderFuture: displayStartOrEndDate === 'start' ? __('sales start') : __('sales end'),\n\t\t\theaderPast:\n\t\t\t\tdisplayStartOrEndDate === 'start'\n\t\t\t\t\t? __('sales began')\n\t\t\t\t\t: ticket.isExpired\n\t\t\t\t\t? __('sales ended')\n\t\t\t\t\t: __('sales end'), // if the ticket is not expired, then it's still on sale\n\t\t};\n\t}, [ticket.isExpired, displayStartOrEndDate]);\n\n\treturn ticket ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tlabels={labels}\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\theader={__('Edit Ticket Sale Dates')}\n\t\t\t\tonChange={onChange}\n\t\t\t\tpopoverPlacement='left-end'\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t\ttooltip={__('edit ticket sales start and end dates')}\n\t\t\t/>\n\t\t\t<div className='ee-entity-status-label'>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default TicketCardSidebar;\n","import { EntityActionsMenuLayout } from '@eventespresso/ui-components';\nimport { EntityCard } from '@eventespresso/ui-components';\nimport { ticketStatusBgColorClassName } from '@eventespresso/helpers';\nimport { useTicketItem } from '@eventespresso/edtr-services';\n\nimport Details from './Details';\nimport TicketCardSidebar from './TicketCardSidebar';\nimport TicketActionsMenu from '../actionsMenu/TicketActionsMenu';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCard: React.FC<TicketItemProps> = ({ id }) => {\n\tconst ticket = useTicketItem({ id });\n\tconst bgClassName = ticketStatusBgColorClassName(ticket);\n\n\treturn ticket ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<TicketActionsMenu entity={ticket} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tdetails={<Details entity={ticket} />}\n\t\t\tentity={ticket}\n\t\t\treverse\n\t\t\tsidebar={<TicketCardSidebar entity={ticket} />}\n\t\t\tsidebarClass={bgClassName}\n\t\t/>\n\t) : null;\n};\n\nexport default TicketCard;\n","import { EntityCardList } from '@eventespresso/ui-components';\nimport { useFilteredTicketIds } from '@eventespresso/edtr-services';\n\nimport TicketCard from './TicketCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\treturn <EntityCardList EntityCard={TicketCard} entityIds={filteredTicketIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}