{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/datetimes/datesList/DateRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCapacity.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDatesActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/actionsMenu/DateActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCardSidebar.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/DateSoldLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateDetailsPanel.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDateCardDetailsItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/Details.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCard.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/CardView.tsx"],"names":["DateRegistrationsLink","_ref","_step","datetime","tickets","useRelatedTickets","getRelatedTickets","entity","entityId","id","count","_iterator","_createForOfIteratorHelper","s","n","done","value","registrationCount","err","e","f","regListUrl","useRegistrationsLink","datetime_id","dbId","countTitle","__","tooltip","_jsx","ItemCount","emphasizeZero","title","children","RegistrationsLink","href","DateCapacity","updateEntity","useDatetimeMutator","_useUpdateTicketQtyBy","useUpdateTicketQtyByCapacity","createBulkQtyUpdateInput","doQtyBulkUpdate","onChange","useCallback","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cap","capacity","input","wrap","_context","prev","next","parseInfinity","_objectSpread","stop","_x","apply","arguments","sprintf","InlineEditInfinity","concat","useDatesActionMenuItems","useEntityActionsMenuItems","DateActionsMenu","props","_objectWithoutProperties","menuItems","EntityActionsMenu","EditableName","className","testid","_ref$view","view","lineCount","onChangeName","name","InlineEditText","tag","DateCardSidebar","date","displayStartOrEndDate","useDatesListFilterState","siteTimeToUtc","useTimeZoneTime","_ref3","_slicedToArray","start","end","startDate","toISOString","endDate","statusText","getDatetimeStatusTextLabel","labels","useMemo","headerFuture","headerPast","isExpired","_jsxs","_Fragment","CalendarDateSwitcher","displayDate","EditDateRangeButton","header","popoverPlacement","DateSoldLink","_reg_status","QueryURLRegStatus","APPROVED","sold","DateDetailsPanel","details","label","EntityDetailsPanel","useDateCardDetailsItems","datetimeId","useEntityCardDetailsItems","Details","onUpdate","description","detailsItems","additionalProps","hooks","applyFilters","EMPTY_OBJECT","venues","useVenues","selectedVenue","findEntityByGuid","venue","onChangeValue","SimpleTextEditorModal","text","VenueSelector","align","inline","noBorderColor","venueName","DateCard","useDatetimeItem","bgClassName","datetimeStatusBgColorClassName","ariaLabel","length","AriaLabel","EntityPaperFrame","Provider","EntityCard","actionsMenu","layout","EntityActionsMenuLayout","Vertical","sidebar","sidebarClass","CardView","filteredDateIds","useFilteredDateIds","EntityCardList","entityIds"],"mappings":"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","file":"static/js/dates-card-view.50f3cb81.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink, useRelatedTickets } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nexport const DateRegistrationsLink: React.FC<Props> = ({ datetime }) => {\n\tconst getRelatedTickets = useRelatedTickets();\n\n\tconst tickets = getRelatedTickets({\n\t\tentity: 'datetimes',\n\t\tentityId: datetime.id,\n\t});\n\n\tlet count = 0;\n\tfor (const ticket of tickets) {\n\t\tcount += ticket.registrationCount;\n\t}\n\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this date.');\n\n\treturn (\n\t\t<ItemCount count={count} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useDatetimeMutator, useUpdateTicketQtyByCapacity } from '@eventespresso/edtr-services';\nimport type { DateItemProps } from '../types';\n\nconst DateCapacity: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst { createBulkQtyUpdateInput, doQtyBulkUpdate } = useUpdateTicketQtyByCapacity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (cap) => {\n\t\t\tconst capacity = parseInfinity(cap);\n\t\t\tif (capacity !== datetime.capacity) {\n\t\t\t\tawait updateEntity({ capacity });\n\n\t\t\t\t// pass the new capacity to create input\n\t\t\t\tconst input = createBulkQtyUpdateInput({ ...datetime, capacity });\n\n\t\t\t\tawait doQtyBulkUpdate(input);\n\t\t\t}\n\t\t},\n\t\t[datetime, updateEntity, createBulkQtyUpdateInput, doQtyBulkUpdate]\n\t);\n\n\t/* translators:  click to edit capacity<linebreak>(registration limit)…*/\n\tconst tooltip = sprintf(__('click to edit capacity%s(registration limit)…'), '\\n');\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tdata-testid='ee-datetime-inline-cap'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={`${datetime.capacity}`}\n\t\t/>\n\t);\n};\n\nexport default DateCapacity;\n","import type { Datetime } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '../../../hooks/entityActionsMenu';\n\nconst useDatesActionMenuItems = (datetime: Datetime): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('datetime', datetime);\n};\n\nexport default useDatesActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport { Datetime } from '@eventespresso/edtr-services';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\n\nimport useDatesActionMenuItems from '../../hooks/useDatesActionMenuItems';\n\nconst DateActionsMenu: React.FC<ActionsMenuComponentProps<Datetime>> = ({ entity, ...props }) => {\n\tconst menuItems = useDatesActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default DateActionsMenu;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\nimport type { DateItemProps } from '../types';\n\ninterface EditableNameProps extends DateItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: datetime,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== datetime.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[datetime.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={datetime.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/ee-components';\nimport { getDatetimeStatusTextLabel } from '@eventespresso/helpers';\nimport { useDatesListFilterState } from '@eventespresso/edtr-services';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\n\nimport type { DateItemProps } from '../types';\n\nconst DateCardSidebar: React.FC<DateItemProps> = ({ entity: date }) => {\n\tconst { displayStartOrEndDate } = useDatesListFilterState();\n\tconst { updateEntity } = useDatetimeMutator(date.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onChange = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getDatetimeStatusTextLabel(date);\n\n\tconst labels = useMemo(() => {\n\t\treturn {\n\t\t\theaderFuture: displayStartOrEndDate === 'start' ? __('starts') : __('ends'),\n\t\t\theaderPast: displayStartOrEndDate === 'start' ? __('started') : date.isExpired ? __('ended') : __('ends'),\n\t\t};\n\t}, [date.isExpired, displayStartOrEndDate]);\n\n\treturn date ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tlabels={labels}\n\t\t\t\tendDate={date.endDate}\n\t\t\t\tstartDate={date.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={date.endDate}\n\t\t\t\theader={__('Edit Event Date')}\n\t\t\t\tonChange={onChange}\n\t\t\t\tpopoverPlacement='right-end'\n\t\t\t\tstartDate={date.startDate}\n\t\t\t\ttooltip={__('edit start and end dates')}\n\t\t\t/>\n\t\t\t<div className='ee-entity-status-label'>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default DateCardSidebar;\n","import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink, QueryURLRegStatus } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nexport const DateSoldLink: React.FC<Props> = ({ datetime }) => {\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId, _reg_status: QueryURLRegStatus.APPROVED });\n\n\tconst tooltip = __('view approved registrations for this date.');\n\n\treturn (\n\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip}>\n\t\t\t{datetime.sold}\n\t\t</RegistrationsLink>\n\t);\n};\n","import { useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityDetailsPanel } from '@eventespresso/ui-components';\nimport { DateRegistrationsLink } from '../DateRegistrationsLink';\nimport { DateSoldLink } from '../DateSoldLink';\nimport DateCapacity from './DateCapacity';\nimport type { DateItemProps } from '../types';\n\nconst DateDetailsPanel: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: <DateSoldLink datetime={datetime} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-capacity',\n\t\t\t\tlabel: __('capacity'),\n\t\t\t\tvalue: <DateCapacity entity={datetime} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-registrations',\n\t\t\t\tclassName: 'ee-has-tooltip',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <DateRegistrationsLink datetime={datetime} />,\n\t\t\t},\n\t\t],\n\t\t[datetime]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-date-details-sold-rsrvd-cap-div' />;\n};\n\nexport default DateDetailsPanel;\n","import type { EntityId } from '@eventespresso/data';\nimport { useEntityCardDetailsItems } from '@edtrHooks/index';\n\nconst useDateCardDetailsItems = (datetimeId: EntityId): Array<React.ReactNode> => {\n\treturn useEntityCardDetailsItems('datetime', datetimeId);\n};\n\nexport default useDateCardDetailsItems;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { EMPTY_OBJECT } from '@eventespresso/constants';\nimport { SimpleTextEditorModal } from '@eventespresso/ee-components';\nimport { useDatetimeMutator, useVenues, hooks } from '@eventespresso/edtr-services';\nimport { VenueSelector } from '@eventespresso/ui-components';\nimport { findEntityByGuid } from '@eventespresso/predicates';\n\nimport DateDetailsPanel from './DateDetailsPanel';\nimport { EditableName } from '../editable';\nimport useDateCardDetailsItems from '../../hooks/useDateCardDetailsItems';\nimport type { DateItemProps } from '../types';\n\nconst Details: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\tconst detailsItems = useDateCardDetailsItems(datetime.id);\n\n\tconst additionalProps = useMemo(() => {\n\t\treturn hooks.applyFilters('eventEditor.datetimes.inlineDescriptionProps', EMPTY_OBJECT, datetime);\n\t}, [datetime]);\n\n\tconst venues = useVenues();\n\tconst selectedVenue = useMemo(() => findEntityByGuid(venues)(datetime?.venue), [datetime?.venue, venues]);\n\n\tconst onChangeValue = useCallback((venue) => updateEntity({ venue }), [updateEntity]);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className='entity-card-details__name' entity={datetime} />\n\n\t\t\t<SimpleTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={datetime.description || __('add description…')}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('click to edit description…')}\n\t\t\t\t{...additionalProps}\n\t\t\t/>\n\n\t\t\t<VenueSelector\n\t\t\t\talign='center'\n\t\t\t\tclassName='ee-event-venue'\n\t\t\t\tinline\n\t\t\t\tnoBorderColor\n\t\t\t\tonChangeValue={onChangeValue}\n\t\t\t\tvalue={datetime?.venue}\n\t\t\t\tvenueName={selectedVenue?.name}\n\t\t\t\tvenues={venues}\n\t\t\t/>\n\n\t\t\t{detailsItems}\n\n\t\t\t<DateDetailsPanel entity={datetime} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import { useMemo } from 'react';\nimport { EntityActionsMenuLayout, EntityCard, EntityPaperFrame } from '@eventespresso/ui-components';\nimport { datetimeStatusBgColorClassName } from '@eventespresso/helpers';\nimport { useDatetimeItem } from '@eventespresso/edtr-services';\n\nimport DateActionsMenu from '../actionsMenu/DateActionsMenu';\nimport DateCardSidebar from './DateCardSidebar';\nimport Details from './Details';\nimport type { DateItemProps } from '../types';\n\nconst DateCard: React.FC<DateItemProps> = ({ id }) => {\n\tconst date = useDatetimeItem({ id });\n\tconst bgClassName = datetimeStatusBgColorClassName(date);\n\n\tconst ariaLabel: string = useMemo(() => {\n\t\t// since title is optional property in datetime, we need to consider that and provide a sane default value if title is missing\n\t\treturn date?.name.length > 0 ? date.name : 'datetime';\n\t}, [date]);\n\n\tconst {\n\t\tAriaLabel: { Provider: AriaLabel },\n\t} = EntityPaperFrame['Contexts'];\n\n\treturn date ? (\n\t\t<AriaLabel value={ariaLabel}>\n\t\t\t<EntityCard\n\t\t\t\tactionsMenu={<DateActionsMenu entity={date} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\t\tdetails={<Details entity={date} />}\n\t\t\t\tentity={date}\n\t\t\t\tsidebar={<DateCardSidebar entity={date} />}\n\t\t\t\tsidebarClass={bgClassName}\n\t\t\t/>\n\t\t</AriaLabel>\n\t) : null;\n};\n\nexport default DateCard;\n","import { EntityCardList } from '@eventespresso/ui-components';\nimport { useFilteredDateIds } from '@eventespresso/edtr-services';\n\nimport DateCard from './DateCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredDateIds = useFilteredDateIds();\n\n\treturn <EntityCardList EntityCard={DateCard} entityIds={filteredDateIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}