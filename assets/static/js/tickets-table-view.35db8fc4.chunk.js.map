{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/TicketRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/Checkbox.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/useHeaderRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/useBodyRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/formValidation.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useBulkEditFormConfig.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useSubmitForm.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/EditDetails.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/useOnDelete.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/Delete.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/EditModeButtons.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/FooterButtons.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/useOnSubmitPrices.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/EditTogether.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/TPCInstance.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useOnSubmit.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/EditSeparately.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useManageTPCStates.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/EditPrices.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/bulkEdit/actions/Actions.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/tableView/TableView.tsx"],"names":["TicketRegistrationsLink","_ref","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","_jsx","ItemCount","count","registrationCount","emphasizeZero","title","children","RegistrationsLink","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","toaster","useSystemNotifications","getCappedQuantity","useCappedQuantity","onChange","useCallback","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","qty","parsedQuantity","quantity","isQtyAdjustedByCapacity","hasQtyChanged","wrap","_context","prev","next","parseInfinity","ticketId","info","message","stop","_x","apply","arguments","InlineEditInfinity","value","concat","cacheId","EditableName","className","testid","_ref$view","view","lineCount","onChangeName","name","InlineEditText","tag","useRecalculateBasePrice","getTicket","useLazyTicket","getTicketPrices","useTicketPrices","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","_tpcData$ticket","tpcData","updatedTicket","existingBasePrice","priceModifiers","newBasePriceAmount","newBasePrice","newPrices","relatedPriceIds","_objectSpread","price","getBasePrice","prices","getPriceModifiers","calculateBasePrice","isModified","order","isNew","amount","_toConsumableArray","sent","reverseCalculate","EditablePrice","_useMoneyDisplay","useMoneyDisplay","afterAmount","beforeAmount","formatAmount","recalculateBasePrice","onChangePrice","Math","abs","_useLockedTicketActio","useLockedTicketAction","alertContainer","showAlert","wrapperProps","useMemoStringify","isTicketLocked","isLocked","_jsxs","Clickable","as","onClick","CurrencyDisplay","InlineEditCurrency","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","_objectWithoutProperties","menuItems","EntityActionsMenu","Checkbox","_useVisibleTicketIds","useVisibleTicketIds","visibleTicketIds","_slicedToArray","ActionCheckbox","visibleEntityIds","useHeaderRowGenerator","canUseBulkEdit","useFeature","stripeCell","useMemo","key","size","textAlign","idCell","nameCell","startCell","_Fragment","endCell","priceCell","quantityCell","soldCell","registrationsCell","actionsCell","filterState","displayStartOrEndDate","cells","filter","Boolean","filterCellByStartOrEndDate","primary","type","useBodyRowGenerator","tickets","useTickets","findEntityByGuid","getLazyTicket","format","useTimeZoneTime","formatForSite","entityId","bgClassName","getTicketBackgroundColorClassName","statusClassName","ticketStatus","classNames","showValueOnMobile","bulkActionCheckboxCell","parseISO","startDate","ENTITY_LIST_DATE_TIME_FORMAT","endDate","sold","cellsData","R","addZebraStripesOnMobile","bodyRowClassName","rowClassName","validate","values","yupToFinalFormErrors","validationSchema","abrupt","yup","min","unitOptions","intervalsToOptions","DATE_INTERVALS","useBulkEditFormConfig","config","onSubmit","onSubmitFrom","form","_len","length","restParams","Array","_key","adjacentFormItemProps","layout","sections","icon","ProfileOutlined","fields","label","fieldType","CalendarOutlined","formControlProps","subFields","options","ControlOutlined","parseAsInfinity","max","useSubmitForm","onClose","_useBulkEdit","useBulkEdit","getSelected","unSelectAll","allTickets","updateEntities","useBulkEditTickets","formData","input","formToBulkUpdateInput","sharedInput","uniqueInputs","map","uniqueInput","EditDetails","isOpen","formConfig","BulkEditDetails","warning","useOnDelete","areTrashedTickets","bulkDelete","useBulkDeleteTickets","entityIds","deletePermanently","Delete","onDelete","_useConfirmationDialo","useConfirmationDialog","onConfirm","onCancel","confirmationDialog","onOpen","useEffect","EditModeButtons","setEditMode","onClickTogether","onClickSeparate","Box","display","alignItems","justifyContent","height","Button","buttonText","Divider","orientation","FooterButtons","onReset","ButtonRow","fullWidth","horizontalAlign","topBordered","buttonType","ButtonType","PRIMARY","useOnSubmitPrices","_useDataState","useDataState","mutateTicket","useMutateTicket","deletePrices","useBulkDeletePrices","_callee2","relatedPrices","nonDefaultPrices","_context2","reduce","isNotDefault","getGuids","Promise","all","withTPCContext","addDefaultPrices","useAddDefaultPrices","TicketPriceCalculator","TPCInstance","setTPCState","getData","sprintf","useOnSubmit","getDataStates","submitPrices","Object","dataState","EditSeparately","_useManageTPCStates","dataStates","useRef","_dataState$ticket","current","_defineProperty","useManageTPCStates","ticketIds","Instance","EditPrices","_useState","useState","_useState2","editMode","EntityEditModal","closeOnOverlayClick","showAlertOnClose","EditTogether","withCurrentUserCan","USE_EVENT_EDITOR_BULK_EDIT","action","setAction","_useDisclosure","useDisclosure","status","useTicketsListFilterState","isEditPricesDisabled","entitiesWithGuIdInArray","some","TicketsStatus","trashedOnly","disabled","onApply","BulkActions","defaultAction","ErrorMessage","SOLD_TICKET_ERROR_MESSAGE","variant","withBulkEdit","filteredTicketIds","useFilteredTicketIds","sortTickets","useReorderTickets","sortResponder","bodyRowGenerator","headerRowGenerator","BulkEditActions","EntityTable","domain","listId","ticketsList","onSort","tableCaption","tableId"],"mappings":"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","file":"static/js/tickets-table-view.35db8fc4.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nexport const TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useTicketMutator, useCappedQuantity } from '@eventespresso/edtr-services';\nimport { useSystemNotifications } from '@eventespresso/toaster';\n\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst toaster = useSystemNotifications();\n\tconst getCappedQuantity = useCappedQuantity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (qty) => {\n\t\t\tconst parsedQuantity = parseInfinity(qty);\n\n\t\t\tconst quantity = getCappedQuantity({ quantity: parsedQuantity, ticketId: ticket.id });\n\n\t\t\tconst isQtyAdjustedByCapacity = quantity !== parsedQuantity;\n\t\t\tconst hasQtyChanged = quantity !== ticket.quantity;\n\n\t\t\tif (isQtyAdjustedByCapacity) {\n\t\t\t\ttoaster.info({\n\t\t\t\t\tmessage: __(\n\t\t\t\t\t\t'Ticket quantity has been adjusted because it cannot be more than the related event date capacity.'\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (hasQtyChanged || isQtyAdjustedByCapacity) {\n\t\t\t\tawait updateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[getCappedQuantity, ticket.id, ticket.quantity, toaster, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\t// Since ticket quantity is restricted by related date capacity\n\t\t\t// it's possible that the quantity has exactly the same value as the min date capacity\n\t\t\t// inline edit uses the internal state to update the value in UI\n\t\t\t// Since the quantity and capacity can be same, it can result in stale value being shown\n\t\t\t// passing a key ensures that UI updates with the correct value\n\t\t\tkey={ticket.cacheId}\n\t\t\tdata-testid='ee-ticket-inline-qty'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\ninterface EditableNameProps extends TicketItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: ticket,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={ticket.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice, getPriceModifiers } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useLazyTicket, useTicketMutator, useTicketPrices } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => Promise<void>;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\tconst getTicket = useLazyTicket();\n\tconst getTicketPrices = useTicketPrices();\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId, getTicket, getTicketPrices });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\tasync (ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst existingBasePrice = getBasePrice(tpcData.prices);\n\t\t\tconst priceModifiers = getPriceModifiers(tpcData.prices);\n\t\t\t// get the updated base price amount\n\t\t\tconst newBasePriceAmount = calculateBasePrice(tpcData.ticket?.price, tpcData.prices);\n\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tconst newBasePrice = existingBasePrice\n\t\t\t\t? // add the exiting base price\n\t\t\t\t  { ...existingBasePrice, isModified: true }\n\t\t\t\t: // add the default price\n\t\t\t\t  { ...defaultBasePrice, order: 1, isNew: true };\n\n\t\t\tconst newPrices = [\n\t\t\t\t// update the base price amount\n\t\t\t\t{ ...newBasePrice, amount: newBasePriceAmount },\n\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t// may be their taxation system works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t...priceModifiers,\n\t\t\t];\n\n\t\t\tconst relatedPriceIds = await mutatePrices(newPrices);\n\n\t\t\tawait updateTicket({\n\t\t\t\t// this is the ticket prices amount\n\t\t\t\tprice: ticketPrice,\n\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\treverseCalculate: true,\n\t\t\t\t// Make sure related prices are updated\n\t\t\t\tprices: relatedPriceIds,\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { Clickable } from '@eventespresso/adapters';\nimport { InlineEditCurrency } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { useMoneyDisplay } from '@eventespresso/services';\nimport { isLocked } from '@eventespresso/predicates';\nimport { useLockedTicketAction } from '@eventespresso/tpc';\n\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\nimport './style.scss';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst { afterAmount, beforeAmount, formatAmount } = useMoneyDisplay();\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = Math.abs(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\tconst { alertContainer, showAlert } = useLockedTicketAction(ticket, 'COPY/TRASH');\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isTicketLocked = isLocked(ticket);\n\n\tconst tooltip = __('edit ticket total…');\n\n\treturn isTicketLocked ? (\n\t\t<Clickable as='div' className='ee-ticket-editable-price' onClick={showAlert}>\n\t\t\t<CurrencyDisplay className={className} value={ticket.price} />\n\t\t\t{alertContainer}\n\t\t</Clickable>\n\t) : (\n\t\t<InlineEditCurrency\n\t\t\tafterAmount={afterAmount}\n\t\t\tamount={ticket.price}\n\t\t\tbeforeAmount={beforeAmount}\n\t\t\tformatAmount={formatAmount}\n\t\t\tid={ticket.id}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import { ActionCheckbox } from '@eventespresso/ee-components';\nimport { useVisibleTicketIds } from '@eventespresso/edtr-services';\nimport type { ActionCheckboxProps } from '@eventespresso/ee-components';\n\nconst Checkbox: React.FC<ActionCheckboxProps> = (props) => {\n\tconst [visibleTicketIds] = useVisibleTicketIds();\n\n\treturn <ActionCheckbox {...props} visibleEntityIds={visibleTicketIds} />;\n};\n\nexport default Checkbox;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { filterCellByStartOrEndDate } from '@eventespresso/edtr-services';\nimport { useFeature } from '@eventespresso/services';\n\nimport type { CellData } from '@eventespresso/ui-components';\nimport type { HeaderRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport Checkbox from './Checkbox';\n\ntype TicketsTableHeaderRowGen = HeaderRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useHeaderRowGenerator = (): TicketsTableHeaderRowGen => {\n\tconst canUseBulkEdit = useFeature('ee_event_editor_bulk_edit');\n\tconst stripeCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-entity-list-status-stripe',\n\t\t\tkey: 'stripe',\n\t\t\tsize: 'nano',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: '',\n\t\t}),\n\t\t[]\n\t);\n\n\tconst idCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'id',\n\t\t\tsize: 'micro',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('ID'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst nameCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'name',\n\t\t\tsize: 'huge',\n\t\t\tvalue: __('Name'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst startCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'start',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Goes on Sale')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('On Sale')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst endCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'end',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Sale Ends')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Ends')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst priceCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'price',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Price'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst quantityCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'quantity',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Qty'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst soldCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'sold',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Sold'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst registrationsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'registrations',\n\t\t\tsize: 'smaller',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: __('Reg List'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst actionsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'actions',\n\t\t\tsize: 'big',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Actions')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Actions')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\treturn useCallback<TicketsTableHeaderRowGen>(\n\t\t(filterState) => {\n\t\t\tconst { displayStartOrEndDate } = filterState;\n\n\t\t\tconst checkboxCell: CellData = canUseBulkEdit && {\n\t\t\t\tkey: 'checkbox',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: (\n\t\t\t\t\t<div className={'ee-rspnsv-table-hide-on-mobile'}>\n\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tcheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t];\n\n\t\t\tconst cells = cellsData\n\t\t\t\t.filter(\n\t\t\t\t\t// removes falsy values\n\t\t\t\t\tBoolean\n\t\t\t\t)\n\t\t\t\t.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: 'ee-editor-ticket-list-items-header-row',\n\t\t\t\tkey: 'ticket-header-row',\n\t\t\t\tprimary: true,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[\n\t\t\tidCell,\n\t\t\tactionsCell,\n\t\t\tcanUseBulkEdit,\n\t\t\tendCell,\n\t\t\tnameCell,\n\t\t\tpriceCell,\n\t\t\tquantityCell,\n\t\t\tregistrationsCell,\n\t\t\tsoldCell,\n\t\t\tstartCell,\n\t\t\tstripeCell,\n\t\t]\n\t);\n};\n\nexport default useHeaderRowGenerator;\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { parseISO } from 'date-fns';\nimport * as R from 'ramda';\n\nimport { addZebraStripesOnMobile, CellData } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { filterCellByStartOrEndDate, useTickets, useLazyTicket } from '@eventespresso/edtr-services';\nimport { ENTITY_LIST_DATE_TIME_FORMAT } from '@eventespresso/constants';\nimport { useFeature, useTimeZoneTime } from '@eventespresso/services';\nimport { getTicketBackgroundColorClassName, ticketStatus } from '@eventespresso/helpers';\nimport { findEntityByGuid } from '@eventespresso/predicates';\nimport type { EntityId } from '@eventespresso/data';\nimport type { BodyRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport TicketActionsMenu from '@edtrUI/tickets/ticketsList/actionsMenu/TicketActionsMenu';\nimport TicketQuantity from '../cardView/TicketQuantity';\nimport { EditableName } from '../editable';\nimport { TicketRegistrationsLink } from '../TicketRegistrationsLink';\nimport Checkbox from './Checkbox';\n\ntype TicketsTableBodyRowGen = BodyRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useBodyRowGenerator = (): TicketsTableBodyRowGen => {\n\tconst tickets = useTickets();\n\tconst getTicket = useCallback((id: EntityId) => findEntityByGuid(tickets)(id), [tickets]);\n\tconst getLazyTicket = useLazyTicket();\n\tconst canUseBulkEdit = useFeature('ee_event_editor_bulk_edit');\n\tconst { formatForSite: format } = useTimeZoneTime();\n\n\treturn useCallback<TicketsTableBodyRowGen>(\n\t\t({ entityId, filterState }) => {\n\t\t\tconst ticket = getTicket(entityId) || getLazyTicket(entityId);\n\t\t\tconst { displayStartOrEndDate } = filterState;\n\n\t\t\tconst bgClassName = getTicketBackgroundColorClassName(ticket);\n\t\t\tconst id = ticket.dbId || 0;\n\t\t\tconst statusClassName = ticketStatus(ticket);\n\n\t\t\tconst stripeCell: CellData = {\n\t\t\t\tclassName: classNames('ee-entity-list-status-stripe', bgClassName),\n\t\t\t\tkey: 'stripe',\n\t\t\t\tshowValueOnMobile: true,\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: ticket.name,\n\t\t\t};\n\n\t\t\tconst bulkActionCheckboxCell: CellData = canUseBulkEdit && {\n\t\t\t\tkey: 'cell',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <Checkbox dbId={ticket.dbId} id={ticket.id} />,\n\t\t\t};\n\n\t\t\tconst idCell: CellData = {\n\t\t\t\tkey: 'id',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: id,\n\t\t\t};\n\n\t\t\tconst nameCell: CellData = {\n\t\t\t\tclassName: 'ee-col-name ee-rspnsv-table-hide-on-mobile',\n\t\t\t\tkey: 'name',\n\t\t\t\tsize: 'huge',\n\t\t\t\tvalue: (\n\t\t\t\t\t<EditableName\n\t\t\t\t\t\tclassName='ee-entity-name ee-entity-list-text ee-focus-priority-5'\n\t\t\t\t\t\tdata-testid={`ee-entity-list-view-row-editable-${ticket.dbId}`}\n\t\t\t\t\t\tentity={ticket}\n\t\t\t\t\t\tview='table'\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst startCell: CellData = {\n\t\t\t\tkey: 'start',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(ticket.startDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst endCell: CellData = {\n\t\t\t\tkey: 'end',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(ticket.endDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst priceCell: CellData = {\n\t\t\t\tkey: 'price',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <CurrencyDisplay value={ticket.price} />,\n\t\t\t};\n\n\t\t\tconst soldCell: CellData = {\n\t\t\t\tkey: 'sold',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: ticket.sold,\n\t\t\t};\n\n\t\t\tconst quantityCell: CellData = {\n\t\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\t\tkey: 'quantity',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst registrationsCell: CellData = {\n\t\t\t\tkey: 'registrations',\n\t\t\t\tsize: 'smaller',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t};\n\n\t\t\tconst actionsCell: CellData = {\n\t\t\t\tkey: 'actions',\n\t\t\t\tsize: 'big',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketActionsMenu entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tbulkActionCheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t].filter(\n\t\t\t\t// removes falsy values\n\t\t\t\tBoolean\n\t\t\t);\n\n\t\t\tconst exclude = ['row', 'stripe', 'name', 'actions'];\n\n\t\t\tconst cells = R.pipe(\n\t\t\t\tR.filter(filterCellByStartOrEndDate(displayStartOrEndDate)),\n\t\t\t\taddZebraStripesOnMobile(exclude)\n\t\t\t)(cellsData);\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: { bodyRowClassName: `ee-editor-ticket-list-view-row ${statusClassName}` },\n\t\t\t\t'data-testid': `ee-ticket-list-view-row-${ticket.dbId}`,\n\t\t\t\tid: `ee-editor-ticket-list-view-row-${ticket.id}`,\n\t\t\t\tkey: `row-${ticket.id}`,\n\t\t\t\trowClassName: 'ee-entity-list-item',\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[canUseBulkEdit, format, getLazyTicket, getTicket]\n\t);\n};\n\nexport default useBodyRowGenerator;\n","import { __ } from '@eventespresso/i18n';\nimport * as yup from 'yup';\n\nimport { yupToFinalFormErrors } from '@eventespresso/form';\nimport { BulkEditFormShape } from './types';\n\nexport const validate = async (values: BulkEditFormShape): Promise<any> => {\n\treturn await yupToFinalFormErrors(validationSchema, values);\n};\n\nconst validationSchema = yup.object({\n\tname: yup.string().min(3, () => __('Name must be at least three characters')),\n});\n","import { __ } from '@eventespresso/i18n';\nimport * as R from 'ramda';\nimport { useCallback, useMemo } from 'react';\n\nimport { DATE_INTERVALS, Intervals, intervalsToOptions } from '@eventespresso/dates';\nimport type { EspressoFormProps } from '@eventespresso/form';\nimport { CalendarOutlined, ControlOutlined, ProfileOutlined } from '@eventespresso/icons';\n\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { validate } from './formValidation';\nimport type { BulkEditFormShape } from './types';\n\ntype DateFormConfig = EspressoFormProps<BulkEditFormShape>;\n\nconst unitOptions = intervalsToOptions(\n\tR.pick<Intervals, keyof Intervals>(['months', 'weeks', 'days', 'hours', 'minutes'], DATE_INTERVALS),\n\ttrue\n);\n\nconst useBulkEditFormConfig = (config?: EspressoFormProps<BulkEditFormShape>): DateFormConfig => {\n\tconst { onSubmit } = config;\n\n\tconst onSubmitFrom: DateFormConfig['onSubmit'] = useCallback(\n\t\t(values, form, ...restParams) => {\n\t\t\treturn onSubmit(values, form, ...restParams);\n\t\t},\n\t\t[onSubmit]\n\t);\n\n\tconst adjacentFormItemProps = useMemoStringify({\n\t\tclassName: 'ee-form-item-pair',\n\t});\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\t...config,\n\t\t\tonSubmit: onSubmitFrom,\n\t\t\tvalidate,\n\t\t\tlayout: 'horizontal',\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tname: 'basics',\n\t\t\t\t\ticon: ProfileOutlined,\n\t\t\t\t\ttitle: __('Basics'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tlabel: __('Name'),\n\t\t\t\t\t\t\tfieldType: 'text',\n\t\t\t\t\t\t\tmin: 3,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'description',\n\t\t\t\t\t\t\tlabel: __('Description'),\n\t\t\t\t\t\t\tfieldType: 'simple-text-editor',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'dates',\n\t\t\t\t\ticon: CalendarOutlined,\n\t\t\t\t\ttitle: __('Dates'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'shiftDates',\n\t\t\t\t\t\t\tlabel: __('Shift dates'),\n\t\t\t\t\t\t\tfieldType: 'group',\n\t\t\t\t\t\t\tformControlProps: {\n\t\t\t\t\t\t\t\tclassName: 'shift-dates',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsubFields: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'unit',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: unitOptions,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('earlier'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'earlier',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('later'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'later',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'details',\n\t\t\t\t\ticon: ControlOutlined,\n\t\t\t\t\ttitle: __('Details'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'quantity',\n\t\t\t\t\t\t\tlabel: __('Quantity For Sale'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'uses',\n\t\t\t\t\t\t\tlabel: __('Number of Uses'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'min',\n\t\t\t\t\t\t\tlabel: __('Minimum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'max',\n\t\t\t\t\t\t\tlabel: __('Maximum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'isRequired',\n\t\t\t\t\t\t\tlabel: __('Required Ticket'),\n\t\t\t\t\t\t\tfieldType: 'switch',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\t[adjacentFormItemProps, config, onSubmitFrom]\n\t);\n};\n\nexport default useBulkEditFormConfig;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useTickets, useBulkEditTickets, formToBulkUpdateInput, useCappedQuantity } from '@eventespresso/edtr-services';\n\nimport type { BulkEditFormShape } from './types';\n\ntype Callback = (values: BulkEditFormShape) => Promise<void>;\n\nconst useSubmitForm = (onClose: VoidFunction): Callback => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst allTickets = useTickets();\n\tconst { updateEntities } = useBulkEditTickets();\n\tconst getCappedQuantity = useCappedQuantity();\n\n\treturn useCallback<Callback>(\n\t\tasync (formData) => {\n\t\t\t// pull the shutter down\n\t\t\tonClose();\n\t\t\t// prepare mutation input from data\n\t\t\tconst input = formToBulkUpdateInput(formData, allTickets, getSelected());\n\n\t\t\t// if quantity is changed\n\t\t\tif ('quantity' in input.sharedInput) {\n\t\t\t\t// restrict quantity by related date capacity\n\t\t\t\tinput.uniqueInputs = input.uniqueInputs.map((uniqueInput) => {\n\t\t\t\t\tconst quantity = getCappedQuantity({\n\t\t\t\t\t\tquantity: input.sharedInput.quantity,\n\t\t\t\t\t\tticketId: uniqueInput.id,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn { ...uniqueInput, quantity };\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// back to basics\n\t\t\tunSelectAll();\n\t\t\t// do the thing\n\t\t\tawait updateEntities(input);\n\t\t},\n\t\t[allTickets, getCappedQuantity, getSelected, onClose, unSelectAll, updateEntities]\n\t);\n};\n\nexport default useSubmitForm;\n","import { __ } from '@eventespresso/i18n';\n\nimport { BulkEditDetails } from '@eventespresso/ee-components';\nimport useBulkEditFormConfig from './useBulkEditFormConfig';\nimport useSubmitForm from './useSubmitForm';\n\ntype EditDetailsProps = {\n\tisOpen: boolean;\n\tonClose: VoidFunction;\n};\n\nconst EditDetails: React.FC<EditDetailsProps> = ({ onClose, isOpen }) => {\n\tconst onSubmit = useSubmitForm(onClose);\n\tconst formConfig = useBulkEditFormConfig({ onSubmit });\n\n\treturn (\n\t\t<BulkEditDetails\n\t\t\tformConfig={formConfig}\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={__('Bulk edit ticket details')}\n\t\t\twarning={__('any changes will be applied to ALL of the selected tickets.')}\n\t\t/>\n\t);\n};\n\nexport default EditDetails;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useBulkDeleteTickets } from '@eventespresso/edtr-services';\n\nimport type { OnDeleteProps } from './types';\n\ntype OnDelete = (props: OnDeleteProps) => VoidFunction;\n\nconst useOnDelete: OnDelete = ({ areTrashedTickets, onClose }) => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst bulkDelete = useBulkDeleteTickets();\n\treturn useCallback<VoidFunction>(() => {\n\t\t// pull the shutter down\n\t\tonClose();\n\t\t// back to basics\n\t\tunSelectAll();\n\n\t\t// goodbye folks :wave:\n\t\tbulkDelete({ entityIds: getSelected(), deletePermanently: areTrashedTickets });\n\t}, [areTrashedTickets, bulkDelete, getSelected, onClose, unSelectAll]);\n};\n\nexport default useOnDelete;\n","import { useEffect } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { useConfirmationDialog } from '@eventespresso/ui-components';\nimport useOnDelete from './useOnDelete';\nimport { OnDeleteProps } from './types';\n\nconst Delete: React.FC<OnDeleteProps> = ({ areTrashedTickets, onClose }) => {\n\tconst onDelete = useOnDelete({ areTrashedTickets, onClose });\n\n\tconst { confirmationDialog, onOpen } = useConfirmationDialog({\n\t\tmessage: areTrashedTickets\n\t\t\t? __('Are you sure you want to permanently delete these tickets? This action can NOT be undone!')\n\t\t\t: __('Are you sure you want to trash these tickets?'),\n\t\ttitle: areTrashedTickets ? __('Delete tickets permanently') : __('Trash tickets'),\n\t\tonConfirm: onDelete,\n\t\tonCancel: onClose,\n\t});\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tuseEffect(() => onOpen(), []);\n\n\treturn <>{confirmationDialog}</>;\n};\n\nexport default Delete;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { Button, Divider } from '@eventespresso/ui-components';\nimport { Box } from '@eventespresso/adapters';\nimport type { EditMode } from '../types';\n\nexport interface EditModeButtonsProps {\n\tsetEditMode: (editMode: EditMode) => void;\n}\n\nexport const EditModeButtons: React.FC<EditModeButtonsProps> = ({ setEditMode }) => {\n\tconst onClickTogether = useCallback(() => setEditMode('together'), [setEditMode]);\n\tconst onClickSeparate = useCallback(() => setEditMode('separate'), [setEditMode]);\n\n\treturn (\n\t\t<Box display='flex' alignItems='center' justifyContent='center' height='100%'>\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickTogether} buttonText={__('Edit all prices together')} />\n\t\t\t\t<p>{__('Edit all the selected ticket prices dynamically')}</p>\n\t\t\t</Box>\n\t\t\t<Divider orientation='vertical' />\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickSeparate} buttonText={__('Edit prices individually')} />\n\t\t\t\t<p>{__('Edit prices for each ticket individually')}</p>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n","import { __ } from '@eventespresso/i18n';\n\nimport { Button, ButtonRow, ButtonType } from '@eventespresso/ui-components';\n\nexport interface FooterButtonsProps {\n\tonSubmit: VoidFunction;\n\tonReset?: VoidFunction;\n\tonCancel?: VoidFunction;\n}\n\nexport const FooterButtons: React.FC<FooterButtonsProps> = ({ onSubmit, onReset, onCancel }) => {\n\treturn (\n\t\t<ButtonRow fullWidth horizontalAlign='right' topBordered>\n\t\t\t{onReset && <Button buttonText={__('Reset')} onClick={onReset} type='reset' />}\n\t\t\t{onCancel && <Button buttonText={__('Cancel')} onClick={onCancel} />}\n\t\t\t<Button buttonText={__('Submit')} buttonType={ButtonType.PRIMARY} onClick={onSubmit} type='submit' />\n\t\t</ButtonRow>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { Price, useTicketPrices, useBulkDeletePrices } from '@eventespresso/edtr-services';\nimport { useDataState, useMutateTicket } from '@eventespresso/tpc';\nimport { isNotDefault, getGuids } from '@eventespresso/predicates';\nimport { useBulkEdit } from '@eventespresso/services';\n\nconst useOnSubmitPrices = (onClose: VoidFunction): (() => Promise<void>) => {\n\tconst { prices, ticket } = useDataState();\n\tconst { getSelected } = useBulkEdit();\n\n\tconst mutateTicket = useMutateTicket();\n\n\tconst getTicketPrices = useTicketPrices();\n\n\tconst deletePrices = useBulkDeletePrices();\n\n\t// Async to make sure that prices are handled before updating the ticket.\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\n\t\t// prices related to all the selected tickets\n\t\tconst relatedPrices = getSelected().reduce<Price[]>(\n\t\t\t(prices, ticketId) => [...prices, ...getTicketPrices(ticketId)],\n\t\t\t[]\n\t\t);\n\n\t\t// prices may contain default taxes,\n\t\t// we need to make sure they are not deleted.\n\t\tconst nonDefaultPrices = relatedPrices.filter(isNotDefault);\n\t\t// delete all non-default prices\n\t\tawait deletePrices(getGuids(nonDefaultPrices));\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update thei price information\n\t\t\tgetSelected().map(async (ticketId) => {\n\t\t\t\tawait mutateTicket({\n\t\t\t\t\t...ticket,\n\t\t\t\t\tid: ticketId,\n\t\t\t\t\tisModified: true,\n\t\t\t\t\tprices,\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}, [deletePrices, getSelected, getTicketPrices, mutateTicket, onClose, prices, ticket]);\n};\n\nexport default useOnSubmitPrices;\n","import { useEffect } from 'react';\n\nimport { TicketPriceCalculator, useAddDefaultPrices, withContext as withTPCContext } from '@eventespresso/tpc';\n\nimport { FooterButtons } from '../buttons';\nimport { EditPricesBaseProps } from '../types';\nimport useOnSubmitPrices from './useOnSubmitPrices';\n\nconst EditTogether: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst addDefaultPrices = useAddDefaultPrices();\n\t// add default prices on mount\n\tuseEffect(() => {\n\t\taddDefaultPrices();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst onSubmit = useOnSubmitPrices(onClose);\n\n\treturn (\n\t\t<>\n\t\t\t<TicketPriceCalculator />\n\t\t\t<FooterButtons onSubmit={onSubmit} onReset={addDefaultPrices} />\n\t\t</>\n\t);\n};\n\nexport default withTPCContext(EditTogether, { ticketId: '' });\n","import { useEffect } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { TicketPriceCalculator, useDataState } from '@eventespresso/tpc';\nimport { ManageTPCStates } from './useManageTPCStates';\n\nexport interface TPCInstanceProps {\n\tsetTPCState: ManageTPCStates['setTPCState'];\n}\n\nexport const TPCInstance: React.FC<TPCInstanceProps> = ({ setTPCState }) => {\n\tconst { ticket, getData } = useDataState();\n\n\tuseEffect(() => {\n\t\tsetTPCState(getData());\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [getData]);\n\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t{sprintf(\n\t\t\t\t\t/* translators: %s ticket name */\n\t\t\t\t\t__('Edit prices for Ticket: %s'),\n\t\t\t\t\tticket.name\n\t\t\t\t)}\n\t\t\t</header>\n\t\t\t<TicketPriceCalculator />\n\t\t</>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { useOnSubmitPrices } from '@eventespresso/tpc';\nimport { ManageTPCStates } from './useManageTPCStates';\n\nconst useOnSubmit = (onClose: VoidFunction, getDataStates: ManageTPCStates['getDataStates']): (() => Promise<void>) => {\n\tconst submitPrices = useOnSubmitPrices();\n\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update their price information\n\t\t\tObject.values(getDataStates()).map(async (dataState) => {\n\t\t\t\t// Finally update the ticket and its price relation\n\t\t\t\tawait submitPrices(dataState);\n\t\t\t})\n\t\t);\n\t}, [getDataStates, onClose, submitPrices]);\n};\n\nexport default useOnSubmit;\n","import { withContext as withTPCContext } from '@eventespresso/tpc';\nimport { useBulkEdit } from '@eventespresso/services';\n\nimport { EditPricesBaseProps } from '../types';\nimport { TPCInstance } from './TPCInstance';\nimport { FooterButtons } from '../buttons';\nimport { useManageTPCStates } from './useManageTPCStates';\nimport useOnSubmit from './useOnSubmit';\n\nconst EditSeparately: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst { getSelected } = useBulkEdit();\n\n\tconst { getDataStates, setTPCState } = useManageTPCStates();\n\n\tconst onSubmit = useOnSubmit(onClose, getDataStates);\n\n\tconst ticketIds = getSelected();\n\n\treturn (\n\t\t<>\n\t\t\t{ticketIds.map<React.ReactNode>((ticketId) => {\n\t\t\t\tconst Instance = withTPCContext(TPCInstance, { ticketId });\n\t\t\t\treturn <Instance key={ticketId} setTPCState={setTPCState} />;\n\t\t\t})}\n\t\t\t<FooterButtons onSubmit={onSubmit} onCancel={onClose} />\n\t\t</>\n\t);\n};\n\nexport default EditSeparately;\n","import { useCallback, useMemo, useRef } from 'react';\n\nimport type { DataState } from '@eventespresso/tpc';\n\nexport interface ManageTPCStates {\n\tsetTPCState: (dataState: DataState) => void;\n\tgetDataStates: () => Record<string, DataState>;\n}\n\nexport const useManageTPCStates = (): ManageTPCStates => {\n\t/**\n\t * This contains the data for all TPC instances.\n\t *\n\t * Since this is not used anywhere in the view, rather only used on final submission\n\t * useRef is made for this, to avoid any unnecessary re-renders\n\t */\n\tconst dataStates = useRef<Record<string, DataState>>({});\n\n\tconst setTPCState = useCallback<ManageTPCStates['setTPCState']>(\n\t\t(dataState) => {\n\t\t\tdataStates.current = { ...dataStates.current, [dataState?.ticket?.id]: dataState };\n\t\t},\n\t\t[dataStates]\n\t);\n\n\tconst getDataStates = useCallback<ManageTPCStates['getDataStates']>(() => dataStates.current, [dataStates]);\n\n\treturn useMemo(() => ({ setTPCState, getDataStates }), [setTPCState, getDataStates]);\n};\n","import { useState } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityEditModal } from '@eventespresso/ui-components';\nimport { EditModeButtons } from './buttons';\nimport { EditTogether } from './editTogether';\nimport { EditSeparately } from './editSeparately';\nimport type { EditMode, EditPricesBaseProps } from './types';\n\nconst EditPrices: React.FC<EditPricesBaseProps> = ({ onClose, isOpen }) => {\n\tconst [editMode, setEditMode] = useState<EditMode>();\n\n\treturn (\n\t\t<EntityEditModal\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\tcloseOnOverlayClick={true}\n\t\t\ttitle={__('Bulk edit ticket prices')}\n\t\t\tshowAlertOnClose={false}\n\t\t>\n\t\t\t{!editMode && <EditModeButtons setEditMode={setEditMode} />}\n\t\t\t{editMode === 'together' && <EditTogether onClose={onClose} />}\n\t\t\t{editMode === 'separate' && <EditSeparately onClose={onClose} />}\n\t\t</EntityEditModal>\n\t);\n};\n\nexport default EditPrices;\n","import { useState, useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { BulkActions } from '@eventespresso/ee-components';\nimport { ErrorMessage } from '@eventespresso/ui-components';\nimport { entitiesWithGuIdInArray, TicketsStatus } from '@eventespresso/predicates';\nimport { SOLD_TICKET_ERROR_MESSAGE } from '@eventespresso/tpc';\nimport { USE_EVENT_EDITOR_BULK_EDIT } from '@eventespresso/constants';\nimport { useDisclosure, useMemoStringify } from '@eventespresso/hooks';\nimport { useTickets, useTicketsListFilterState } from '@eventespresso/edtr-services';\nimport { withCurrentUserCan, useBulkEdit } from '@eventespresso/services';\nimport type { BulkActionsProps } from '@eventespresso/ui-components';\n\nimport Checkbox from '../../tableView/Checkbox';\nimport { EditDetails } from '../details';\nimport { Delete } from '../delete';\nimport { EditPrices } from '../prices';\n\ntype Action = 'edit-details' | 'delete' | 'edit-prices' | '';\n\nconst Actions: React.FC = () => {\n\tconst [action, setAction] = useState<Action>('');\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst { status } = useTicketsListFilterState();\n\tconst { getSelected } = useBulkEdit();\n\tconst allTickets = useTickets();\n\n\tconst isEditPricesDisabled = useMemo(() => {\n\t\tconst selectedTickets = entitiesWithGuIdInArray(allTickets, getSelected());\n\t\tconst isSoldTicketSelected = selectedTickets.some((ticket) => Boolean(ticket.sold));\n\t\treturn isSoldTicketSelected;\n\t}, [allTickets, getSelected]);\n\n\tconst areTrashedTickets = status === TicketsStatus.trashedOnly;\n\n\tconst options = useMemoStringify([\n\t\t{\n\t\t\tvalue: '',\n\t\t\tlabel: __('bulk actions'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-details',\n\t\t\tlabel: __('edit ticket details'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'delete',\n\t\t\tlabel: areTrashedTickets ? __('delete tickets') : __('trash tickets'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-prices',\n\t\t\tlabel: __('edit ticket prices'),\n\t\t\tdisabled: isEditPricesDisabled,\n\t\t},\n\t]);\n\n\tconst onApply = useCallback<BulkActionsProps<Action>['onApply']>(\n\t\t(action) => {\n\t\t\tsetAction(action);\n\t\t\tonOpen();\n\t\t},\n\t\t[onOpen]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<BulkActions\n\t\t\t\tCheckbox={Checkbox}\n\t\t\t\tdefaultAction=''\n\t\t\t\tid={'ee-bulk-edit-tickets-actions'}\n\t\t\t\tonApply={isEditPricesDisabled ? null : onApply}\n\t\t\t\toptions={options}\n\t\t\t/>\n\t\t\t{action === 'edit-details' && <EditDetails isOpen={isOpen} onClose={onClose} />}\n\t\t\t{action === 'delete' && <Delete areTrashedTickets={areTrashedTickets} onClose={onClose} />}\n\t\t\t{action === 'edit-prices' && <EditPrices isOpen={isOpen} onClose={onClose} />}\n\t\t\t<ErrorMessage message={isEditPricesDisabled && SOLD_TICKET_ERROR_MESSAGE} variant='subtle' />\n\t\t</>\n\t);\n};\n\nexport default withCurrentUserCan(USE_EVENT_EDITOR_BULK_EDIT)(Actions);\n","import { __ } from '@eventespresso/i18n';\n\nimport { EntityTable } from '@eventespresso/ee-components';\nimport useHeaderRowGenerator from './useHeaderRowGenerator';\nimport useBodyRowGenerator from './useBodyRowGenerator';\nimport {\n\tticketsList,\n\tdomain,\n\tuseFilteredTicketIds,\n\tuseReorderTickets,\n\tuseTicketsListFilterState,\n} from '@eventespresso/edtr-services';\nimport { withBulkEdit } from '@eventespresso/services';\nimport { Actions as BulkEditActions } from '../bulkEdit';\n\n/**\n * Displays tickets in a standard list table like view\n */\nconst TableView: React.FC = () => {\n\tconst filterState = useTicketsListFilterState();\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\tconst { sortResponder: sortTickets } = useReorderTickets(filteredTicketIds);\n\n\tconst bodyRowGenerator = useBodyRowGenerator();\n\tconst headerRowGenerator = useHeaderRowGenerator();\n\n\treturn (\n\t\t<>\n\t\t\t<BulkEditActions />\n\t\t\t<EntityTable\n\t\t\t\tbodyRowGenerator={bodyRowGenerator}\n\t\t\t\tdomain={domain}\n\t\t\t\tentityIds={filteredTicketIds}\n\t\t\t\tfilterState={filterState}\n\t\t\t\theaderRowGenerator={headerRowGenerator}\n\t\t\t\tlistId={ticketsList}\n\t\t\t\tonSort={sortTickets}\n\t\t\t\ttableCaption={__('Tickets')}\n\t\t\t\ttableId='ticket-entities-table-view'\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default withBulkEdit(TableView);\n"],"sourceRoot":""}