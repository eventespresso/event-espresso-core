{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/TicketRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/TicketSoldLink.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketDetailsPanel.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/Details.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCardSidebar.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCard.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/CardView.tsx"],"names":["TicketRegistrationsLink","_ref","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","_jsx","ItemCount","count","registrationCount","emphasizeZero","title","children","RegistrationsLink","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","toaster","useSystemNotifications","getCappedQuantity","useCappedQuantity","onChange","useCallback","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","qty","parsedQuantity","quantity","isQtyAdjustedByCapacity","hasQtyChanged","wrap","_context","prev","next","parseInfinity","ticketId","info","message","stop","_x","apply","arguments","InlineEditInfinity","value","concat","cacheId","EditableName","className","testid","_ref$view","view","lineCount","onChangeName","name","InlineEditText","tag","useRecalculateBasePrice","getTicket","useLazyTicket","getTicketPrices","useTicketPrices","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","_tpcData$ticket","tpcData","updatedTicket","existingBasePrice","priceModifiers","newBasePriceAmount","newBasePrice","newPrices","relatedPriceIds","_objectSpread","price","getBasePrice","prices","getPriceModifiers","calculateBasePrice","isModified","order","isNew","amount","_toConsumableArray","sent","reverseCalculate","EditablePrice","_useMoneyDisplay","useMoneyDisplay","afterAmount","beforeAmount","formatAmount","recalculateBasePrice","onChangePrice","Math","abs","_useLockedTicketActio","useLockedTicketAction","alertContainer","showAlert","wrapperProps","useMemoStringify","isTicketLocked","isLocked","_jsxs","Clickable","as","onClick","CurrencyDisplay","InlineEditCurrency","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","_objectWithoutProperties","menuItems","EntityActionsMenu","TicketSoldLink","_reg_status","QueryURLRegStatus","APPROVED","sold","TicketDetailsPanel","details","useMemo","label","EntityDetailsPanel","Details","onUpdate","description","additionalProps","hooks","applyFilters","EMPTY_OBJECT","_Fragment","SimpleTextEditorModal","text","TicketCardSidebar","displayStartOrEndDate","useTicketsListFilterState","siteTimeToUtc","useTimeZoneTime","_ref3","_slicedToArray","start","end","startDate","toISOString","endDate","statusText","getTicketStatusTextLabel","labels","headerFuture","headerPast","isExpired","CalendarDateSwitcher","displayDate","EditDateRangeButton","header","popoverPlacement","TicketCard","useTicketItem","bgClassName","ticketStatusBgColorClassName","ariaLabel","length","AriaLabel","EntityPaperFrame","Provider","EntityCard","actionsMenu","layout","EntityActionsMenuLayout","Vertical","reverse","sidebar","sidebarClass","CardView","filteredTicketIds","useFilteredTicketIds","EntityCardList","entityIds"],"mappings":"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","file":"static/js/tickets-card-view.c504daf9.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nexport const TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useTicketMutator, useCappedQuantity } from '@eventespresso/edtr-services';\nimport { useSystemNotifications } from '@eventespresso/toaster';\n\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst toaster = useSystemNotifications();\n\tconst getCappedQuantity = useCappedQuantity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (qty) => {\n\t\t\tconst parsedQuantity = parseInfinity(qty);\n\n\t\t\tconst quantity = getCappedQuantity({ quantity: parsedQuantity, ticketId: ticket.id });\n\n\t\t\tconst isQtyAdjustedByCapacity = quantity !== parsedQuantity;\n\t\t\tconst hasQtyChanged = quantity !== ticket.quantity;\n\n\t\t\tif (isQtyAdjustedByCapacity) {\n\t\t\t\ttoaster.info({\n\t\t\t\t\tmessage: __(\n\t\t\t\t\t\t'Ticket quantity has been adjusted because it cannot be more than the related event date capacity.'\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (hasQtyChanged || isQtyAdjustedByCapacity) {\n\t\t\t\tawait updateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[getCappedQuantity, ticket.id, ticket.quantity, toaster, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\t// Since ticket quantity is restricted by related date capacity\n\t\t\t// it's possible that the quantity has exactly the same value as the min date capacity\n\t\t\t// inline edit uses the internal state to update the value in UI\n\t\t\t// Since the quantity and capacity can be same, it can result in stale value being shown\n\t\t\t// passing a key ensures that UI updates with the correct value\n\t\t\tkey={ticket.cacheId}\n\t\t\tdata-testid='ee-ticket-inline-qty'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\ninterface EditableNameProps extends TicketItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: ticket,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={ticket.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice, getPriceModifiers } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useLazyTicket, useTicketMutator, useTicketPrices } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => Promise<void>;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\tconst getTicket = useLazyTicket();\n\tconst getTicketPrices = useTicketPrices();\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId, getTicket, getTicketPrices });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\tasync (ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst existingBasePrice = getBasePrice(tpcData.prices);\n\t\t\tconst priceModifiers = getPriceModifiers(tpcData.prices);\n\t\t\t// get the updated base price amount\n\t\t\tconst newBasePriceAmount = calculateBasePrice(tpcData.ticket?.price, tpcData.prices);\n\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tconst newBasePrice = existingBasePrice\n\t\t\t\t? // add the exiting base price\n\t\t\t\t  { ...existingBasePrice, isModified: true }\n\t\t\t\t: // add the default price\n\t\t\t\t  { ...defaultBasePrice, order: 1, isNew: true };\n\n\t\t\tconst newPrices = [\n\t\t\t\t// update the base price amount\n\t\t\t\t{ ...newBasePrice, amount: newBasePriceAmount },\n\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t// may be their taxation system works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t...priceModifiers,\n\t\t\t];\n\n\t\t\tconst relatedPriceIds = await mutatePrices(newPrices);\n\n\t\t\tawait updateTicket({\n\t\t\t\t// this is the ticket prices amount\n\t\t\t\tprice: ticketPrice,\n\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\treverseCalculate: true,\n\t\t\t\t// Make sure related prices are updated\n\t\t\t\tprices: relatedPriceIds,\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { Clickable } from '@eventespresso/adapters';\nimport { InlineEditCurrency } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { useMoneyDisplay } from '@eventespresso/services';\nimport { isLocked } from '@eventespresso/predicates';\nimport { useLockedTicketAction } from '@eventespresso/tpc';\n\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\nimport './style.scss';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst { afterAmount, beforeAmount, formatAmount } = useMoneyDisplay();\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = Math.abs(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\tconst { alertContainer, showAlert } = useLockedTicketAction(ticket, 'COPY/TRASH');\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isTicketLocked = isLocked(ticket);\n\n\tconst tooltip = __('edit ticket total…');\n\n\treturn isTicketLocked ? (\n\t\t<Clickable as='div' className='ee-ticket-editable-price' onClick={showAlert}>\n\t\t\t<CurrencyDisplay className={className} value={ticket.price} />\n\t\t\t{alertContainer}\n\t\t</Clickable>\n\t) : (\n\t\t<InlineEditCurrency\n\t\t\tafterAmount={afterAmount}\n\t\t\tamount={ticket.price}\n\t\t\tbeforeAmount={beforeAmount}\n\t\t\tformatAmount={formatAmount}\n\t\t\tid={ticket.id}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink, QueryURLRegStatus } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nexport const TicketSoldLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId, _reg_status: QueryURLRegStatus.APPROVED });\n\n\tconst tooltip = __('view approved registrations for this ticket.');\n\n\treturn (\n\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip}>\n\t\t\t{ticket.sold}\n\t\t</RegistrationsLink>\n\t);\n};\n","import { useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { TicketRegistrationsLink } from '../TicketRegistrationsLink';\nimport { TicketSoldLink } from '../TicketSoldLink';\nimport { EntityDetailsPanel } from '@eventespresso/ui-components';\nimport TicketQuantity from './TicketQuantity';\nimport type { TicketItemProps } from '../types';\n\nconst TicketDetailsPanel: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: <TicketSoldLink ticket={ticket} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-qty',\n\t\t\t\tlabel: __('quantity'),\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-registrations',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t},\n\t\t],\n\t\t[ticket]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-ticket-details-sold-rsrvd-qty-div' />;\n};\n\nexport default TicketDetailsPanel;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EMPTY_OBJECT } from '@eventespresso/constants';\nimport { SimpleTextEditorModal } from '@eventespresso/ee-components';\nimport { useTicketMutator, hooks } from '@eventespresso/edtr-services';\n\nimport { EditableName, EditablePrice } from '../editable';\nimport TicketDetailsPanel from './TicketDetailsPanel';\n\nimport type { TicketItemProps } from '../types';\n\nconst Details: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\tconst additionalProps = useMemo(() => {\n\t\treturn hooks.applyFilters('eventEditor.tickets.inlineDescriptionProps', EMPTY_OBJECT, ticket);\n\t}, [ticket]);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={ticket} />\n\n\t\t\t<SimpleTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={ticket.description || __('add description…')}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('click to edit description…')}\n\t\t\t\t{...additionalProps}\n\t\t\t/>\n\n\t\t\t<EditablePrice className='entity-card-details__price' entity={ticket} />\n\n\t\t\t<TicketDetailsPanel entity={ticket} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/ee-components';\nimport { getTicketStatusTextLabel } from '@eventespresso/helpers';\nimport { useTicketMutator, useTicketsListFilterState } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCardSidebar: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onChange = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getTicketStatusTextLabel(ticket);\n\n\tconst labels = useMemo(() => {\n\t\treturn {\n\t\t\theaderFuture: displayStartOrEndDate === 'start' ? __('sales start') : __('sales end'),\n\t\t\theaderPast:\n\t\t\t\tdisplayStartOrEndDate === 'start'\n\t\t\t\t\t? __('sales began')\n\t\t\t\t\t: ticket.isExpired\n\t\t\t\t\t? __('sales ended')\n\t\t\t\t\t: __('sales end'), // if the ticket is not expired, then it's still on sale\n\t\t};\n\t}, [ticket.isExpired, displayStartOrEndDate]);\n\n\treturn ticket ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tlabels={labels}\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\theader={__('Edit Ticket Sale Dates')}\n\t\t\t\tonChange={onChange}\n\t\t\t\tpopoverPlacement='left-end'\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t\ttooltip={__('edit ticket sales start and end dates')}\n\t\t\t/>\n\t\t\t<div className='ee-entity-status-label'>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default TicketCardSidebar;\n","import { useMemo } from 'react';\nimport { EntityActionsMenuLayout } from '@eventespresso/ui-components';\nimport { EntityCard, EntityPaperFrame } from '@eventespresso/ui-components';\nimport { ticketStatusBgColorClassName } from '@eventespresso/helpers';\nimport { useTicketItem } from '@eventespresso/edtr-services';\n\nimport Details from './Details';\nimport TicketCardSidebar from './TicketCardSidebar';\nimport TicketActionsMenu from '../actionsMenu/TicketActionsMenu';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCard: React.FC<TicketItemProps> = ({ id }) => {\n\tconst ticket = useTicketItem({ id });\n\tconst bgClassName = ticketStatusBgColorClassName(ticket);\n\n\tconst ariaLabel: string = useMemo(() => {\n\t\t// since title is optional property in datetime, we need to consider that and provide a sane default value if title is missing\n\t\treturn ticket.name.length > 0 ? ticket.name : 'ticket';\n\t}, [ticket]);\n\n\tconst {\n\t\tAriaLabel: { Provider: AriaLabel },\n\t} = EntityPaperFrame['Contexts'];\n\n\treturn ticket ? (\n\t\t<AriaLabel value={ariaLabel}>\n\t\t\t<EntityCard\n\t\t\t\tactionsMenu={<TicketActionsMenu entity={ticket} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\t\tdetails={<Details entity={ticket} />}\n\t\t\t\tentity={ticket}\n\t\t\t\treverse\n\t\t\t\tsidebar={<TicketCardSidebar entity={ticket} />}\n\t\t\t\tsidebarClass={bgClassName}\n\t\t\t/>\n\t\t</AriaLabel>\n\t) : null;\n};\n\nexport default TicketCard;\n","import { EntityCardList } from '@eventespresso/ui-components';\nimport { useFilteredTicketIds } from '@eventespresso/edtr-services';\n\nimport TicketCard from './TicketCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\treturn <EntityCardList EntityCard={TicketCard} entityIds={filteredTicketIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}