{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/datetimes/datesList/DateRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCapacity.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDatesActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/actionsMenu/DateActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCardSidebar.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/DateSoldLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateDetailsPanel.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDateCardDetailsItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/Details.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCard.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/CardView.tsx"],"names":["DateRegistrationsLink","_ref","datetime","regListUrl","useRegistrationsLink","datetime_id","dbId","tooltip","__","_jsx","RegistrationsLink","href","DateCapacity","entity","updateEntity","useDatetimeMutator","id","_useUpdateTicketQtyBy","useUpdateTicketQtyByCapacity","createBulkQtyUpdateInput","doQtyBulkUpdate","onChange","useCallback","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cap","capacity","input","wrap","_context","prev","next","parseInfinity","_objectSpread","stop","_x","apply","arguments","sprintf","InlineEditInfinity","value","concat","useDatesActionMenuItems","useEntityActionsMenuItems","DateActionsMenu","props","_objectWithoutProperties","menuItems","EntityActionsMenu","EditableName","className","testid","_ref$view","view","lineCount","onChangeName","name","InlineEditText","tag","DateCardSidebar","date","displayStartOrEndDate","useDatesListFilterState","siteTimeToUtc","useTimeZoneTime","_ref3","_slicedToArray","start","end","startDate","toISOString","endDate","statusText","getDatetimeStatusTextLabel","labels","useMemo","headerFuture","headerPast","isExpired","_jsxs","_Fragment","children","CalendarDateSwitcher","displayDate","EditDateRangeButton","header","popoverPlacement","DateSoldLink","_reg_status","QueryURLRegStatus","APPROVED","sold","DateDetailsPanel","details","label","EntityDetailsPanel","useDateCardDetailsItems","datetimeId","useEntityCardDetailsItems","Details","onUpdate","description","detailsItems","additionalProps","hooks","applyFilters","EMPTY_OBJECT","venues","useVenues","selectedVenue","findEntityByGuid","venue","onChangeValue","SimpleTextEditorModal","text","title","VenueSelector","align","inline","noBorderColor","venueName","DateCard","useDatetimeItem","bgClassName","datetimeStatusBgColorClassName","EntityCard","actionsMenu","layout","EntityActionsMenuLayout","Vertical","sidebar","sidebarClass","CardView","filteredDateIds","useFilteredDateIds","EntityCardList","entityIds"],"mappings":"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","file":"static/js/dates-card-view.fa57f1de.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nexport const DateRegistrationsLink: React.FC<Props> = ({ datetime }) => {\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId });\n\n\tconst tooltip = __('view ALL registrations for this date.');\n\n\treturn <RegistrationsLink href={regListUrl} tooltip={tooltip} />;\n};\n","import { useCallback } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useDatetimeMutator, useUpdateTicketQtyByCapacity } from '@eventespresso/edtr-services';\nimport type { DateItemProps } from '../types';\n\nconst DateCapacity: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst { createBulkQtyUpdateInput, doQtyBulkUpdate } = useUpdateTicketQtyByCapacity();\n\n\tconst onChange = useCallback<InlineEditProps['onChange']>(\n\t\tasync (cap) => {\n\t\t\tconst capacity = parseInfinity(cap);\n\t\t\tif (capacity !== datetime.capacity) {\n\t\t\t\tawait updateEntity({ capacity });\n\n\t\t\t\t// pass the new capacity to create input\n\t\t\t\tconst input = createBulkQtyUpdateInput({ ...datetime, capacity });\n\n\t\t\t\tawait doQtyBulkUpdate(input);\n\t\t\t}\n\t\t},\n\t\t[datetime, updateEntity, createBulkQtyUpdateInput, doQtyBulkUpdate]\n\t);\n\n\t/* translators:  click to edit capacity<linebreak>(registration limit)…*/\n\tconst tooltip = sprintf(__('click to edit capacity%s(registration limit)…'), '\\n');\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tdata-testid='ee-datetime-inline-cap'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={`${datetime.capacity}`}\n\t\t/>\n\t);\n};\n\nexport default DateCapacity;\n","import type { Datetime } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '../../../hooks/entityActionsMenu';\n\nconst useDatesActionMenuItems = (datetime: Datetime): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('datetime', datetime);\n};\n\nexport default useDatesActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport { Datetime } from '@eventespresso/edtr-services';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\n\nimport useDatesActionMenuItems from '../../hooks/useDatesActionMenuItems';\n\nconst DateActionsMenu: React.FC<ActionsMenuComponentProps<Datetime>> = ({ entity, ...props }) => {\n\tconst menuItems = useDatesActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default DateActionsMenu;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\nimport type { DateItemProps } from '../types';\n\ninterface EditableNameProps extends DateItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: datetime,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== datetime.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[datetime.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={__('click to edit title…')}\n\t\t\tvalue={datetime.name || __('add title…')}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/ee-components';\nimport { getDatetimeStatusTextLabel } from '@eventespresso/helpers';\nimport { useDatesListFilterState } from '@eventespresso/edtr-services';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\n\nimport type { DateItemProps } from '../types';\n\nconst DateCardSidebar: React.FC<DateItemProps> = ({ entity: date }) => {\n\tconst { displayStartOrEndDate } = useDatesListFilterState();\n\tconst { updateEntity } = useDatetimeMutator(date.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onChange = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getDatetimeStatusTextLabel(date);\n\n\tconst labels = useMemo(() => {\n\t\treturn {\n\t\t\theaderFuture: displayStartOrEndDate === 'start' ? __('starts') : __('ends'),\n\t\t\theaderPast: displayStartOrEndDate === 'start' ? __('started') : date.isExpired ? __('ended') : __('ends'),\n\t\t};\n\t}, [date.isExpired, displayStartOrEndDate]);\n\n\treturn date ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tlabels={labels}\n\t\t\t\tendDate={date.endDate}\n\t\t\t\tstartDate={date.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={date.endDate}\n\t\t\t\theader={__('Edit Event Date')}\n\t\t\t\tonChange={onChange}\n\t\t\t\tpopoverPlacement='right-end'\n\t\t\t\tstartDate={date.startDate}\n\t\t\t\ttooltip={__('edit start and end dates')}\n\t\t\t/>\n\t\t\t<div className='ee-entity-status-label'>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default DateCardSidebar;\n","import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink, QueryURLRegStatus } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nexport const DateSoldLink: React.FC<Props> = ({ datetime }) => {\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId, _reg_status: QueryURLRegStatus.APPROVED });\n\n\tconst tooltip = __('view approved registrations for this date.');\n\n\treturn (\n\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip}>\n\t\t\t{datetime.sold}\n\t\t</RegistrationsLink>\n\t);\n};\n","import { useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityDetailsPanel } from '@eventespresso/ui-components';\nimport { DateRegistrationsLink } from '../DateRegistrationsLink';\nimport { DateSoldLink } from '../DateSoldLink';\nimport DateCapacity from './DateCapacity';\nimport type { DateItemProps } from '../types';\n\nconst DateDetailsPanel: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: <DateSoldLink datetime={datetime} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-capacity',\n\t\t\t\tlabel: __('capacity'),\n\t\t\t\tvalue: <DateCapacity entity={datetime} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-registrations',\n\t\t\t\tclassName: 'ee-has-tooltip',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <DateRegistrationsLink datetime={datetime} />,\n\t\t\t},\n\t\t],\n\t\t[datetime]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-date-details-sold-rsrvd-cap-div' />;\n};\n\nexport default DateDetailsPanel;\n","import type { EntityId } from '@eventespresso/data';\nimport { useEntityCardDetailsItems } from '@edtrHooks/index';\n\nconst useDateCardDetailsItems = (datetimeId: EntityId): Array<React.ReactNode> => {\n\treturn useEntityCardDetailsItems('datetime', datetimeId);\n};\n\nexport default useDateCardDetailsItems;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { EMPTY_OBJECT } from '@eventespresso/constants';\nimport { SimpleTextEditorModal } from '@eventespresso/ee-components';\nimport { useDatetimeMutator, useVenues, hooks } from '@eventespresso/edtr-services';\nimport { VenueSelector } from '@eventespresso/ui-components';\nimport { findEntityByGuid } from '@eventespresso/predicates';\n\nimport DateDetailsPanel from './DateDetailsPanel';\nimport { EditableName } from '../editable';\nimport useDateCardDetailsItems from '../../hooks/useDateCardDetailsItems';\nimport type { DateItemProps } from '../types';\n\nconst Details: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\tconst detailsItems = useDateCardDetailsItems(datetime.id);\n\n\tconst additionalProps = useMemo(() => {\n\t\treturn hooks.applyFilters('eventEditor.datetimes.inlineDescriptionProps', EMPTY_OBJECT, datetime);\n\t}, [datetime]);\n\n\tconst venues = useVenues();\n\tconst selectedVenue = useMemo(() => findEntityByGuid(venues)(datetime?.venue), [datetime?.venue, venues]);\n\n\tconst onChangeValue = useCallback((venue) => updateEntity({ venue }), [updateEntity]);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className='entity-card-details__name' entity={datetime} />\n\n\t\t\t<SimpleTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={datetime.description || __('add description…')}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('click to edit description…')}\n\t\t\t\t{...additionalProps}\n\t\t\t/>\n\n\t\t\t<VenueSelector\n\t\t\t\talign='center'\n\t\t\t\tclassName='ee-event-venue'\n\t\t\t\tinline\n\t\t\t\tnoBorderColor\n\t\t\t\tonChangeValue={onChangeValue}\n\t\t\t\tvalue={datetime?.venue}\n\t\t\t\tvenueName={selectedVenue?.name}\n\t\t\t\tvenues={venues}\n\t\t\t/>\n\n\t\t\t{detailsItems}\n\n\t\t\t<DateDetailsPanel entity={datetime} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import { EntityActionsMenuLayout } from '@eventespresso/ui-components';\nimport { datetimeStatusBgColorClassName } from '@eventespresso/helpers';\nimport { EntityCard } from '@eventespresso/ui-components';\nimport { useDatetimeItem } from '@eventespresso/edtr-services';\n\nimport DateActionsMenu from '../actionsMenu/DateActionsMenu';\nimport DateCardSidebar from './DateCardSidebar';\nimport Details from './Details';\nimport type { DateItemProps } from '../types';\n\nconst DateCard: React.FC<DateItemProps> = ({ id }) => {\n\tconst date = useDatetimeItem({ id });\n\tconst bgClassName = datetimeStatusBgColorClassName(date);\n\n\treturn date ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<DateActionsMenu entity={date} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tdetails={<Details entity={date} />}\n\t\t\tentity={date}\n\t\t\tsidebar={<DateCardSidebar entity={date} />}\n\t\t\tsidebarClass={bgClassName}\n\t\t/>\n\t) : null;\n};\n\nexport default DateCard;\n","import { EntityCardList } from '@eventespresso/ui-components';\nimport { useFilteredDateIds } from '@eventespresso/edtr-services';\n\nimport DateCard from './DateCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredDateIds = useFilteredDateIds();\n\n\treturn <EntityCardList EntityCard={DateCard} entityIds={filteredDateIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}