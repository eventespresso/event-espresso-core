{"version":3,"sources":["application/ui/calendars/dateDisplay/index.ts","application/ui/calendars/dateDisplay/BiggieCalendarDate/index.tsx","application/ui/calendars/dateDisplay/CalendarDateRange/index.tsx","application/ui/calendars/dateDisplay/CalendarPageDate/index.tsx","application/ui/calendars/dateDisplay/MediumCalendarDate/index.tsx","application/ui/calendars/dateDisplay/CalendarDateSwitcher/index.tsx","application/ui/layout/EntityCard/index.tsx","domain/eventEditor/ui/tickets/TicketRegistrationsLink.tsx","domain/eventEditor/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","domain/eventEditor/ui/tickets/ticketsList/editable/EditableDesc.tsx","domain/eventEditor/ui/tickets/ticketsList/editable/EditableName.tsx","domain/eventEditor/ui/tickets/hooks/useRecalculateBasePrice.ts","domain/eventEditor/ui/tickets/ticketsList/editable/EditablePrice.tsx","domain/eventEditor/ui/tickets/hooks/useTicketsActionMenuItems.ts","domain/eventEditor/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","domain/eventEditor/ui/tickets/ticketsList/cardView/TicketDetailsPanel.tsx","domain/eventEditor/ui/tickets/ticketsList/cardView/Details.tsx","domain/eventEditor/ui/tickets/ticketsList/cardView/TicketCard.tsx","domain/eventEditor/ui/tickets/ticketsList/cardView/CardView.tsx"],"names":["BiggieCalendarDate","date","editButton","footerText","headerText","onEdit","showTime","timeRange","props","format","useTimeZoneTime","formatForSite","onEditHandler","useCallback","event","dateObject","Date","parseISO","isValid","className","classNames","editDateButton","onClick","onKeyPress","tooltip","labelPosition","tooltipPosition","icon","Calendar","WEEKDAY_ONLY_FULL_FORMAT","MONTH_ONLY_FULL_FORMAT","DAY_ONLY_SHORT_FORMAT","YEAR_ONLY_LONG_FORMAT","TIME_ONLY_12H_SHORT_FORMAT","CalendarDateRange","endDate","startDate","startDateObject","endDateObject","differenceInCalendarDays","htmlClassName","key","__","time","headerTxt","CalendarPageSize","MediumCalendarDate","addWrapper","mediumDate","MONTH_ONLY_LONG_FORMAT","CalendarDateSwitcher","React","memo","displayDate","DisplayStartOrEndDate","start","labels","PLUS_ONE_MONTH","PLUS_TWO_MONTHS","footer","footerPast","footerFuture","header","headerPast","headerFuture","switchTenseForDate","EntityCard","cacheId","actionsMenu","details","entity","sidebar","reverse","layout","getPropsAreEqual","TicketRegistrationsLink","ticket","admin","useConfig","siteUrl","adminUrl","getAdminUrl","adminSiteUrl","page","ADMIN_ROUTES","REGISTRATIONS","eventId","useEventId","regListUrl","addQueryArgs","event_id","ticket_id","dbId","return","countTitle","tooltipProps","useMemoStringify","placement","count","registrationCount","title","emphasizeZero","offset","href","TicketQuantity","updateEntity","useTicketMutator","id","onChange","qty","quantity","parseInfinity","onChangeValue","value","EditableDesc","onChangeDesc","description","ticketDesc","EditableName","view","onChangeName","name","ticketName","fitText","tag","useRecalculateBasePrice","ticketId","getDataState","useInitialState","usePriceMutator","calculateBasePrice","filter","isBasePrice","basePrice","amount","EditablePrice","recalculateBasePrice","onChangePrice","price","parseFloat","reverseCalculate","wrapperProps","CurrencyInput","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","menuItems","TicketDetailsPanel","label","sold","type","Details","TicketCard","displayStartOrEndDate","useTicketsListFilterState","bgClassName","statusBgColorClassName","getStatusTextLabel","EntityActionsMenuLayout","Vertical","CardView","filteredEntities","useTicketsListContext","entities"],"mappings":"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","file":"static/js/tickets-card-view.81c43e45.chunk.js","sourcesContent":["export * from './BiggieCalendarDate';\nexport * from './CalendarDateRange';\nexport * from './CalendarPageDate';\nexport * from './MediumCalendarDate';\nexport * from './types';\n\nexport { default as CalendarDateSwitcher } from './CalendarDateSwitcher';\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { parseISO, isValid } from 'date-fns';\n\nimport { Button } from '@application/ui/input';\nimport { Calendar } from '@appDisplay/icons';\nimport { CalendarDateProps } from '../types';\nimport { LabelPosition } from '@appDisplay/withLabel';\nimport { TimezoneTimeInfo } from '@application/ui/display';\nimport {\n\tDAY_ONLY_SHORT_FORMAT,\n\tMONTH_ONLY_FULL_FORMAT,\n\tTIME_ONLY_12H_SHORT_FORMAT,\n\tWEEKDAY_ONLY_FULL_FORMAT,\n\tYEAR_ONLY_LONG_FORMAT,\n} from '@appConstants/dateFnsFormats';\nimport { useTimeZoneTime } from '@appServices/hooks';\n\nimport './style.scss';\n\nexport interface BiggieCalendarDateProps extends CalendarDateProps {\n\tdate: Date | string;\n\ttimeRange?: string;\n}\n\n/**\n * Displays a full calendar date, but REALLY BIG!!\n */\nexport const BiggieCalendarDate: React.FC<BiggieCalendarDateProps> = ({\n\tdate,\n\teditButton = {},\n\tfooterText,\n\theaderText,\n\tonEdit = null,\n\tshowTime = false,\n\ttimeRange,\n\t...props\n}) => {\n\tconst { formatForSite: format } = useTimeZoneTime();\n\tconst onEditHandler = useCallback((event) => onEdit(event), [onEdit]);\n\tconst dateObject = date instanceof Date ? date : parseISO(date);\n\n\tif (!isValid(dateObject)) {\n\t\treturn null;\n\t}\n\n\tconst className = classNames(props.className, 'ee-biggie-calendar-date__wrapper');\n\n\tconst editDateButton = typeof onEdit === 'function' && (\n\t\t<Button\n\t\t\tclassName='ee-edit-calendar-date-btn'\n\t\t\tonClick={onEditHandler}\n\t\t\tonKeyPress={onEditHandler}\n\t\t\ttooltip={editButton.tooltip}\n\t\t\tlabelPosition={editButton.tooltipPosition as LabelPosition}\n\t\t\ticon={Calendar}\n\t\t/>\n\t);\n\n\treturn (\n\t\t<div className={className}>\n\t\t\t{headerText && <div className='ee-biggie-calendar-date__header'>{headerText}</div>}\n\t\t\t<div className='ee-biggie-calendar-date'>\n\t\t\t\t<div className='ee-bcd__weekday'>{format(dateObject, WEEKDAY_ONLY_FULL_FORMAT)}</div>\n\t\t\t\t<div className='ee-bcd__month'>{format(dateObject, MONTH_ONLY_FULL_FORMAT)}</div>\n\t\t\t\t<div className='ee-bcd__month-day-sep'></div>\n\t\t\t\t<div className='ee-bcd__day'>{format(dateObject, DAY_ONLY_SHORT_FORMAT)}</div>\n\t\t\t\t<div className='ee-bcd__year'>{format(dateObject, YEAR_ONLY_LONG_FORMAT)}</div>\n\t\t\t\t{showTime && !timeRange && (\n\t\t\t\t\t<div className='ee-bcd__time'>{format(dateObject, TIME_ONLY_12H_SHORT_FORMAT)}</div>\n\t\t\t\t)}\n\t\t\t\t{timeRange && <div className='ee-bcd__time'>{timeRange}</div>}\n\t\t\t\t<TimezoneTimeInfo date={dateObject} />\n\t\t\t</div>\n\t\t\t{footerText && <div className='ee-biggie-calendar-date__footer'>{footerText}</div>}\n\t\t\t{editDateButton}\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { differenceInCalendarDays, parseISO, isValid } from 'date-fns';\nimport { __ } from '@wordpress/i18n';\n\nimport { useTimeZoneTime } from '@appServices/hooks';\nimport { BiggieCalendarDate, MediumCalendarDate, CalendarDateProps } from '../index';\nimport { TIME_ONLY_12H_SHORT_FORMAT } from '@appConstants/dateFnsFormats';\nimport './style.scss';\n\ninterface CalendarDateRangeProps extends CalendarDateProps {\n\tstartDate: Date | string;\n\tendDate: Date | string;\n}\n\n/**\n * Displays a pair of calendar dates representing a date range\n */\nexport const CalendarDateRange: React.FC<CalendarDateRangeProps> = ({\n\tclassName = '',\n\tendDate,\n\tfooterText = '',\n\theaderText = '',\n\tshowTime = true,\n\tstartDate,\n}) => {\n\tconst { formatForSite: format } = useTimeZoneTime();\n\n\tconst startDateObject = startDate instanceof Date ? startDate : parseISO(startDate);\n\tconst endDateObject = endDate instanceof Date ? endDate : parseISO(endDate);\n\n\tif (!isValid(startDateObject) || !isValid(endDateObject)) {\n\t\treturn null;\n\t}\n\n\tif (differenceInCalendarDays(startDateObject, endDateObject) !== 0) {\n\t\tconst htmlClassName = classNames(className, 'ee-calendar-date-range-wrapper');\n\t\treturn (\n\t\t\t<div className={htmlClassName}>\n\t\t\t\t<div className={'ee-calendar-date-range'}>\n\t\t\t\t\t<MediumCalendarDate date={startDateObject} key={'start-date'} showTime={showTime} />\n\t\t\t\t\t<div className={'ee-calendar-date-range__divider'}>{__('to')}</div>\n\t\t\t\t\t<MediumCalendarDate date={endDateObject} key={'end-date'} showTime={showTime} />\n\t\t\t\t</div>\n\t\t\t\t{footerText && <div className={'ee-calendar-date-range__footer'}>{footerText}</div>}\n\t\t\t</div>\n\t\t);\n\t}\n\tconst time =\n\t\tformat(startDateObject, TIME_ONLY_12H_SHORT_FORMAT + ' - ') + format(endDateObject, TIME_ONLY_12H_SHORT_FORMAT);\n\tconst headerTxt = headerText ? headerText : <span>&nbsp;</span>;\n\n\treturn (\n\t\t<BiggieCalendarDate\n\t\t\tdate={startDateObject}\n\t\t\tclassName={className}\n\t\t\theaderText={headerTxt}\n\t\t\tfooterText={footerText}\n\t\t\ttimeRange={time}\n\t\t/>\n\t);\n};\n","import React from 'react';\nimport { parseISO, isValid } from 'date-fns';\nimport { __ } from '@wordpress/i18n';\n\nimport { Tooltip } from '@infraUI/display';\nimport { useTimeZoneTime } from '@appServices/hooks';\n\nimport './style.scss';\nimport {\n\tDAY_ONLY_SHORT_FORMAT,\n\tMONTH_ONLY_LONG_FORMAT,\n\tLOCALIZED_DATE_AND_TIME_FULL_FORMAT,\n} from '@appConstants/dateFnsFormats';\n\nexport enum CalendarPageSize {\n\tTINY = 'tiny',\n\tSMALL = 'small',\n\tMEDIUM = 'medium',\n\tBIG = 'big',\n}\n\nexport interface CalendarPageDateProps {\n\tstartDate?: Date;\n\tendDate?: Date;\n\tsize?: CalendarPageSize;\n\tstatusClassName?: string;\n}\n\n/**\n * CalendarPageDate\n * Displays a date as if it were a page from\n * one of those mini calendars where each page is a day\n */\nexport const CalendarPageDate: React.FC<CalendarPageDateProps> = ({\n\tstartDate,\n\tendDate,\n\tsize = CalendarPageSize.SMALL,\n\tstatusClassName,\n\t...otherProps\n}) => {\n\tconst { formatForSite: format } = useTimeZoneTime();\n\n\tconst startDateObject = startDate instanceof Date ? startDate : parseISO(startDate);\n\tconst endDateObject = endDate instanceof Date ? endDate : parseISO(endDate);\n\tif (!isValid(startDateObject) && !isValid(endDateObject)) {\n\t\treturn null;\n\t}\n\n\tconst getStartDate = (startDate: Date, statusClassName: string) => {\n\t\treturn (\n\t\t\tstartDate && (\n\t\t\t\t<div className='ee-calendar-page-date-wrapper-start'>\n\t\t\t\t\t{ renderCalendarPage(startDate, statusClassName) }\n\t\t\t\t</div>\n\t\t\t)\n\t\t);\n\t};\n\n\tconst getEndDate = (endDate: Date, statusClassName: string) => {\n\t\treturn (\n\t\t\tendDate && (\n\t\t\t\t<div className='ee-calendar-page-date-wrapper-end'>\n\t\t\t\t\t{ renderCalendarPage(endDate, statusClassName, 'end') }\n\t\t\t\t</div>\n\t\t\t)\n\t\t);\n\t};\n\n\tconst getDivider = (startDate: Date, endDate: Date) => {\n\t\treturn startDate && endDate && <div className='ee-calendar-page-date-to'>{ __('TO') }</div>;\n\t};\n\n\tconst renderCalendarPage = (date: Date, statusClassName: string, startOrEnd = 'start') => {\n\t\tlet className = `ee-calendar-page-date-page ee-calendar-page-date-${startOrEnd}`;\n\t\tclassName += statusClassName ? ` ${statusClassName}` : '';\n\t\treturn (\n\t\t\t<Tooltip tooltip={ format(date, LOCALIZED_DATE_AND_TIME_FULL_FORMAT) }>\n\t\t\t\t<div className={ className }>\n\t\t\t\t\t<div className={ 'ee-calendar-page-date-month' }>{ format(date, MONTH_ONLY_LONG_FORMAT) }</div>\n\t\t\t\t\t<div className={ 'ee-calendar-page-date-day' }>{ format(date, DAY_ONLY_SHORT_FORMAT) }</div>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t};\n\n\tconst className = `ee-calendar-page-date-wrapper ee-calendar-page-date-${size}`;\n\treturn (\n\t\t<div className={ className } { ...otherProps }>\n\t\t\t{ getStartDate(startDateObject, statusClassName) }\n\t\t\t{ getDivider(startDateObject, endDateObject) }\n\t\t\t{ getEndDate(endDateObject, statusClassName) }\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { parseISO, isValid } from 'date-fns';\nimport { __ } from '@wordpress/i18n';\n\nimport { useTimeZoneTime } from '@appServices/hooks';\n\nimport './style.scss';\nimport { CalendarDateProps } from '../types';\n\nimport {\n\tDAY_ONLY_SHORT_FORMAT,\n\tMONTH_ONLY_LONG_FORMAT,\n\tTIME_ONLY_12H_SHORT_FORMAT,\n\tWEEKDAY_ONLY_FULL_FORMAT,\n\tYEAR_ONLY_LONG_FORMAT,\n} from '@appConstants/dateFnsFormats';\n\nexport interface MediumCalendarDateProps extends CalendarDateProps {\n\tdate: Date;\n\taddWrapper?: boolean;\n}\n\n/**\n * Displays a full calendar date... just not so bigly\n */\nexport const MediumCalendarDate: React.FC<MediumCalendarDateProps> = ({\n\tdate,\n\theaderText,\n\tfooterText,\n\taddWrapper = false,\n\tshowTime = false,\n\t...props\n}) => {\n\tconst { formatForSite: format } = useTimeZoneTime();\n\tconst dateObject: Date = date instanceof Date ? date : parseISO(date);\n\n\tif (!isValid(dateObject)) {\n\t\treturn null;\n\t}\n\n\tconst className = classNames(props.className, 'ee-medium-calendar-date__wrapper');\n\n\tconst mediumDate = (\n\t\t<>\n\t\t\t{headerText && <div className='ee-medium-calendar-date__header'>{headerText}</div>}\n\t\t\t<div className='ee-medium-calendar-date'>\n\t\t\t\t<div className='ee-mcd__weekday'>{format(dateObject, WEEKDAY_ONLY_FULL_FORMAT)}</div>\n\t\t\t\t<div className='ee-mcd__month-day'>\n\t\t\t\t\t<span className='ee-mcd__month'>{format(dateObject, MONTH_ONLY_LONG_FORMAT)}</span>\n\t\t\t\t\t<span className='ee-mcd__day'>{format(dateObject, DAY_ONLY_SHORT_FORMAT)}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className='ee-mcd__year'>{format(dateObject, YEAR_ONLY_LONG_FORMAT)}</div>\n\t\t\t\t{showTime && <div className='ee-mcd__time'>{format(dateObject, TIME_ONLY_12H_SHORT_FORMAT)}</div>}\n\t\t\t</div>\n\t\t\t{footerText && <div className='ee-medium-calendar-date__footer'>{footerText}</div>}\n\t\t</>\n\t);\n\treturn addWrapper ? <div className={className}>{mediumDate}</div> : mediumDate;\n};\n","import React from 'react';\nimport { parseISO } from 'date-fns';\nimport { __ } from '@wordpress/i18n';\n\nimport { BiggieCalendarDate, CalendarDateRange } from '@appCalendars/dateDisplay';\nimport { CalendarDateSwitcherProps } from './types';\nimport { DisplayStartOrEndDate } from '@sharedServices/filterState';\nimport { PLUS_ONE_MONTH, PLUS_TWO_MONTHS } from '@sharedConstants/defaultDates';\nimport { switchTenseForDate } from '@appServices/utilities/date';\n\nconst CalendarDateSwitcher: React.FC<CalendarDateSwitcherProps> = React.memo(\n\t({ className, displayDate = DisplayStartOrEndDate.start, labels, ...props }) => {\n\t\tconst startDate = parseISO(props.startDate) || PLUS_ONE_MONTH;\n\t\tconst endDate = parseISO(props.endDate) || PLUS_TWO_MONTHS;\n\t\tconst { footer = '', footerPast, footerFuture, header = '', headerPast, headerFuture } = labels;\n\t\tconst footerText = footerPast && footerFuture ? switchTenseForDate(endDate, footerPast, footerFuture) : footer;\n\t\tconst headerText =\n\t\t\theaderPast && headerFuture ? switchTenseForDate(startDate, headerPast, headerFuture) : header;\n\n\t\tconst start = (\n\t\t\t<BiggieCalendarDate\n\t\t\t\tclassName={className}\n\t\t\t\tdate={startDate}\n\t\t\t\tfooterText={footerText}\n\t\t\t\theaderText={headerText || __('starts')}\n\t\t\t\tshowTime\n\t\t\t/>\n\t\t);\n\n\t\tswitch (displayDate) {\n\t\t\tcase 'end':\n\t\t\t\treturn (\n\t\t\t\t\t<BiggieCalendarDate\n\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t\tdate={endDate}\n\t\t\t\t\t\tfooterText={footerText}\n\t\t\t\t\t\theaderText={headerText || __('ends')}\n\t\t\t\t\t\tshowTime\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'both':\n\t\t\t\treturn (\n\t\t\t\t\t<CalendarDateRange\n\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t\tendDate={endDate}\n\t\t\t\t\t\tfooterText={footerText}\n\t\t\t\t\t\theaderText={headerText}\n\t\t\t\t\t\tshowTime\n\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'start':\n\t\t\t\treturn start;\n\t\t\tdefault:\n\t\t\t\treturn start;\n\t\t}\n\t}\n);\n\nexport default CalendarDateSwitcher;\n","import React from 'react';\n\nimport EntityPaperFrame from '../EntityPaperFrame';\nimport { EntityCardProps } from './types';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport './styles.scss';\n\nconst EntityCard: React.FC<EntityCardProps> = ({ cacheId, actionsMenu, details, entity, sidebar, reverse = false }) => {\n\tconst layout = reverse ? 'entity-card entity-card--reverse-layout' : 'entity-card';\n\n\treturn (\n\t\t<EntityPaperFrame cacheId={cacheId} className={'ee-entity-card-wrapper ee-fade-in'} entity={entity}>\n\t\t\t<div className={layout}>\n\t\t\t\t<div className={'entity-card__sidebar'}>{sidebar}</div>\n\t\t\t\t<div className={'entity-card__details-wrapper'}>\n\t\t\t\t\t<div className={'entity-card__details'}>{details}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={'entity-card__menu'}>{actionsMenu}</div>\n\t\t\t</div>\n\t\t</EntityPaperFrame>\n\t);\n};\n\nexport default React.memo(EntityCard, getPropsAreEqual(['cacheId']));\n","import React from 'react';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nimport { ADMIN_ROUTES } from '@sharedConstants/adminRoutes';\nimport getAdminUrl from '@sharedServices/utils/url/getAdminUrl';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport { RegistrationsLink } from '@appLayout/entityList';\nimport { Ticket } from '@edtrServices/apollo/types';\nimport useConfig from '@appServices/config/useConfig';\nimport useEventId from '@edtrServices/apollo/queries/events/useEventId';\n\nimport ItemCount from '@appDisplay/ItemCount';\nimport { useMemoStringify } from '@application/services/hooks';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst {\n\t\tsiteUrl: { admin },\n\t} = useConfig();\n\tconst adminUrl = getAdminUrl({ adminSiteUrl: admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\tconst eventId = useEventId();\n\tconst regListUrl = addQueryArgs(adminUrl, {\n\t\tevent_id: eventId,\n\t\tticket_id: ticket.dbId,\n\t\treturn: 'edit',\n\t});\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view registrations for this ticket.');\n\tconst tooltipProps = useMemoStringify({ placement: 'top' as 'top' });\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} title={countTitle} emphasizeZero={false} offset={[12, -4]}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} tooltipProps={tooltipProps} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default React.memo(TicketRegistrationsLink, getPropsAreEqual(['ticket', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport parseInfinity from '@appServices/utilities/number/parseInfinity';\nimport { InlineEditInfinity, TextProps } from '@appInputs/InlineEditInput';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.cacheId]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tonChangeValue={onChange}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t\ttooltip={__('Click to edit quantity...')}\n\t\t/>\n\t);\n};\n\nexport default React.memo(TicketQuantity, getPropsAreEqual(['entity', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { InlineEditTextArea } from '@appInputs/InlineEditInput';\nimport { getPropsAreEqual } from '@appServices/utilities';\n\ninterface EditableDescProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditableDesc: React.FC<EditableDescProps> = ({ entity: ticket, className }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChangeDesc = useCallback(\n\t\t(description: string): void => {\n\t\t\tif (description !== ticket.description) {\n\t\t\t\tupdateEntity({ description });\n\t\t\t}\n\t\t},\n\t\t[ticket.cacheId]\n\t);\n\n\tconst tooltip = __('Click to edit description...');\n\n\tconst ticketDesc = ticket.description || tooltip;\n\n\treturn <InlineEditTextArea className={className} onChangeValue={onChangeDesc} tooltip={tooltip} value={ticketDesc} />;\n};\n\nexport default React.memo(EditableDesc, getPropsAreEqual(['entity', 'description']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { InlineEditText } from '@appInputs/InlineEditInput';\nimport { getPropsAreEqual } from '@appServices/utilities';\n\ninterface EditableNameProps extends TicketItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({ className, entity: ticket, view = 'card' }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.cacheId]\n\t);\n\n\tconst tooltip = __('Click to edit title...');\n\n\tconst ticketName = ticket.name || tooltip;\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tfitText={view === 'card'}\n\t\t\ttag={view === 'table' ? 'p' : 'h4'}\n\t\t\tclassName={className}\n\t\t\tonChangeValue={onChangeName}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditableName, getPropsAreEqual(['entity', 'name']));\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@dataServices/types';\nimport { useInitialState } from '@edtrUI/tickets/ticketPriceCalculator/data';\nimport { calculateBasePrice } from '@edtrUI/tickets/ticketPriceCalculator/utils';\nimport { isBasePrice } from '@sharedEntities/priceTypes/predicates';\nimport { usePriceMutator } from '@edtrServices/apollo/mutations';\n\nconst useRecalculateBasePrice = (ticketId: EntityId): VoidFunction => {\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId });\n\tconst { updateEntity } = usePriceMutator();\n\n\treturn useCallback(() => {\n\t\t// get the list of updated prices with the amount of base price updated\n\t\tconst newPrices = calculateBasePrice(getDataState(null));\n\t\t// the price if present should be the basePrice\n\t\tconst [basePrice] = newPrices.filter(isBasePrice);\n\n\t\t// if we are lucky\n\t\tif (basePrice?.id) {\n\t\t\tconst { id, amount } = basePrice;\n\t\t\t// update the base price\n\t\t\tupdateEntity({ id, amount });\n\t\t}\n\t}, [getDataState, updateEntity]);\n};\n\nexport default useRecalculateBasePrice;\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport CurrencyInput from '@appInputs/CurrencyInput';\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport { useMemoStringify } from '@application/services/hooks';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<EditablePriceProps> = ({ entity: ticket, className }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount: price }: any): void => {\n\t\t\tprice = parseFloat(price);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\tupdateEntity({ price, reverseCalculate: true });\n\t\t\t\trecalculateBasePrice();\n\t\t\t}\n\t\t},\n\t\t[ticket.cacheId]\n\t);\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\treturn (\n\t\t<CurrencyInput\n\t\t\tid={ticket.id}\n\t\t\tamount={ticket.price}\n\t\t\tplaceholder={__('set price...')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={__('Click to edit ticket total...')}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditablePrice, getPropsAreEqual(['entity', 'price']));\n","import React from 'react';\n\nimport { Ticket } from '@edtrServices/apollo/types';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import React from 'react';\n\nimport { ActionsMenuComponentProps, EntityActionsMenu } from '@appLayout/entityActionsMenu';\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\nimport { Ticket } from '@edtrServices/apollo/types';\nimport { getPropsAreEqual } from '@appServices/utilities';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default React.memo(TicketActionsMenu, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\nimport { EntityDetailsPanel, Sold } from '@application/ui/display/entityDetailsPanel';\nimport TicketQuantity from './TicketQuantity';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport type { TicketItemProps } from '../types';\n\nconst TicketDetailsPanel: React.FC<TicketItemProps> = React.memo(({ entity: ticket }) => {\n\tconst details = [\n\t\t{\n\t\t\tid: 'ee-ticket-sold',\n\t\t\tlabel: __('sold'),\n\t\t\tvalue: <Sold dbId={ticket.dbId} sold={ticket.sold} type='ticket' />,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-ticket-qty',\n\t\t\tlabel: __('quantity'),\n\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-ticket-registrations',\n\t\t\tlabel: __('reg list'),\n\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t},\n\t];\n\treturn <EntityDetailsPanel details={details} className='ee-editor-ticket-details-sold-rsrvd-qty-div' />;\n});\n\nexport default React.memo(TicketDetailsPanel, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport TicketDetailsPanel from './TicketDetailsPanel';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport { EditableDesc, EditableName, EditablePrice } from '../editable';\nimport type { TicketItemProps } from '../types';\n\nconst Details: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={ticket} />\n\n\t\t\t<EditableDesc className={'entity-card-details__description'} entity={ticket} />\n\n\t\t\t<EditablePrice className='entity-card-details__price' entity={ticket} />\n\n\t\t\t<TicketDetailsPanel entity={ticket} />\n\t\t</>\n\t);\n};\n\nexport default React.memo(Details, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport { CalendarDateSwitcher } from '@appCalendars/dateDisplay';\nimport Details from './Details';\n\nimport TicketActionsMenu from '../actionsMenu/TicketActionsMenu';\nimport { EntityActionsMenuLayout } from '@appLayout/entityActionsMenu';\n\nimport TicketProvider from '@edtrServices/context/TicketContext';\nimport EntityCard from '@appLayout/EntityCard';\nimport { getStatusTextLabel, statusBgColorClassName } from '@sharedEntities/tickets/helpers';\nimport { useTicketsListFilterState } from '@edtrServices/filterState';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport type { TicketItemProps } from '../types';\nimport { useMemoStringify } from '@application/services/hooks';\n\nconst TicketCard: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst bgClassName = statusBgColorClassName(ticket);\n\tconst footer = getStatusTextLabel(ticket);\n\tconst labels = useMemoStringify({ footer });\n\n\treturn ticket ? (\n\t\t<TicketProvider id={ticket.id}>\n\t\t\t<EntityCard\n\t\t\t\tentity={ticket}\n\t\t\t\tcacheId={ticket.cacheId + displayStartOrEndDate}\n\t\t\t\tactionsMenu={<TicketActionsMenu entity={ticket} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\t\tsidebar={\n\t\t\t\t\t<CalendarDateSwitcher\n\t\t\t\t\t\tclassName={bgClassName}\n\t\t\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\t\t\tendDate={ticket.endDate}\n\t\t\t\t\t\tlabels={labels}\n\t\t\t\t\t\tstartDate={ticket.startDate}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\tdetails={<Details entity={ticket} />}\n\t\t\t\treverse\n\t\t\t/>\n\t\t</TicketProvider>\n\t) : null;\n};\n\nexport default React.memo(TicketCard, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { EntityCardList } from '@appLayout/entityList';\nimport TicketCard from './TicketCard';\nimport { useTicketsListContext } from '@edtrServices/context/EntityListContext';\n\nconst CardView: React.FC = () => {\n\tconst { filteredEntities } = useTicketsListContext();\n\n\treturn <EntityCardList EntityCard={TicketCard} entities={filteredEntities} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}